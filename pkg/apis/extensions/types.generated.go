/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package extensions

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/kubernetes/pkg/api"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg6_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg5_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_api.ObjectMeta
		var v1 pkg4_resource.Quantity
		var v2 pkg1_unversioned.TypeMeta
		var v3 pkg3_types.UID
		var v4 pkg6_intstr.IntOrString
		var v5 pkg5_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct7 := r.ContainerType()
		if yyct7 == codecSelferValueTypeMap1234 {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if yyct7 == codecSelferValueTypeArray1234 {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = len(x.Selector) != 0
			var yynn13 int
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				yynn13 = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
				yynn13 = 0
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct21 := r.ContainerType()
		if yyct21 == codecSelferValueTypeMap1234 {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if yyct21 == codecSelferValueTypeArray1234 {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys22 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv24 := &x.Selector
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					z.F.DecMapStringStringX(yyv24, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv28 := &x.Selector
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			z.F.DecMapStringStringX(yyv28, false, d)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym30 := z.EncBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep31 := !z.EncBinary()
			yy2arr31 := z.EncBasicHandle().StructToArray
			var yyq31 [5]bool
			_, _, _ = yysep31, yyq31, yy2arr31
			const yyr31 bool = false
			yyq31[0] = x.Kind != ""
			yyq31[1] = x.APIVersion != ""
			yyq31[2] = true
			yyq31[3] = true
			yyq31[4] = true
			var yynn31 int
			if yyr31 || yy2arr31 {
				r.EncodeArrayStart(5)
			} else {
				yynn31 = 0
				for _, b := range yyq31 {
					if b {
						yynn31++
					}
				}
				r.EncodeMapStart(yynn31)
				yynn31 = 0
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[0] {
					yym33 := z.EncBinary()
					_ = yym33
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[1] {
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[2] {
					yy39 := &x.ObjectMeta
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else if z.HasExtensions() && z.EncExt(yy39) {
					} else {
						z.EncFallback(yy39)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy41 := &x.ObjectMeta
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else if z.HasExtensions() && z.EncExt(yy41) {
					} else {
						z.EncFallback(yy41)
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[3] {
					yy44 := &x.Spec
					yy44.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy45 := &x.Spec
					yy45.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[4] {
					yy47 := &x.Status
					yy47.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy48 := &x.Status
					yy48.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct50 := r.ContainerType()
		if yyct50 == codecSelferValueTypeMap1234 {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if yyct50 == codecSelferValueTypeArray1234 {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys51 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv54 := &x.ObjectMeta
				yym55 := z.DecBinary()
				_ = yym55
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv54) {
				} else {
					z.DecFallback(yyv54, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv56 := &x.Spec
				yyv56.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv57 := &x.Status
				yyv57.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj58 int
	var yyb58 bool
	var yyhl58 bool = l >= 0
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv61 := &x.ObjectMeta
		yym62 := z.DecBinary()
		_ = yym62
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv61) {
		} else {
			z.DecFallback(yyv61, false)
		}
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv63 := &x.Spec
		yyv63.CodecDecodeSelf(d)
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv64 := &x.Status
		yyv64.CodecDecodeSelf(d)
	}
	for {
		yyj58++
		if yyhl58 {
			yyb58 = yyj58 > l
		} else {
			yyb58 = r.CheckBreak()
		}
		if yyb58 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj58-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym65 := z.EncBinary()
		_ = yym65
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep66 := !z.EncBinary()
			yy2arr66 := z.EncBasicHandle().StructToArray
			var yyq66 [2]bool
			_, _, _ = yysep66, yyq66, yy2arr66
			const yyr66 bool = false
			yyq66[0] = x.Kind != ""
			yyq66[1] = x.APIVersion != ""
			var yynn66 int
			if yyr66 || yy2arr66 {
				r.EncodeArrayStart(2)
			} else {
				yynn66 = 0
				for _, b := range yyq66 {
					if b {
						yynn66++
					}
				}
				r.EncodeMapStart(yynn66)
				yynn66 = 0
			}
			if yyr66 || yy2arr66 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq66[0] {
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq66[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym69 := z.EncBinary()
					_ = yym69
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr66 || yy2arr66 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq66[1] {
					yym71 := z.EncBinary()
					_ = yym71
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq66[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym72 := z.EncBinary()
					_ = yym72
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr66 || yy2arr66 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym73 := z.DecBinary()
	_ = yym73
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct74 := r.ContainerType()
		if yyct74 == codecSelferValueTypeMap1234 {
			yyl74 := r.ReadMapStart()
			if yyl74 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl74, d)
			}
		} else if yyct74 == codecSelferValueTypeArray1234 {
			yyl74 := r.ReadArrayStart()
			if yyl74 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl74, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys75Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys75Slc
	var yyhl75 bool = l >= 0
	for yyj75 := 0; ; yyj75++ {
		if yyhl75 {
			if yyj75 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys75Slc = r.DecodeBytes(yys75Slc, true, true)
		yys75 := string(yys75Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys75 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys75)
		} // end switch yys75
	} // end for yyj75
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj78 int
	var yyb78 bool
	var yyhl78 bool = l >= 0
	yyj78++
	if yyhl78 {
		yyb78 = yyj78 > l
	} else {
		yyb78 = r.CheckBreak()
	}
	if yyb78 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj78++
	if yyhl78 {
		yyb78 = yyj78 > l
	} else {
		yyb78 = r.CheckBreak()
	}
	if yyb78 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj78++
		if yyhl78 {
			yyb78 = yyj78 > l
		} else {
			yyb78 = r.CheckBreak()
		}
		if yyb78 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj78-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [4]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[0] = x.Kind != ""
			yyq82[1] = x.Name != ""
			yyq82[2] = x.APIVersion != ""
			yyq82[3] = x.Subresource != ""
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(4)
			} else {
				yynn82 = 0
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[0] {
					yym84 := z.EncBinary()
					_ = yym84
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym85 := z.EncBinary()
					_ = yym85
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[1] {
					yym87 := z.EncBinary()
					_ = yym87
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym88 := z.EncBinary()
					_ = yym88
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[2] {
					yym90 := z.EncBinary()
					_ = yym90
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym91 := z.EncBinary()
					_ = yym91
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[3] {
					yym93 := z.EncBinary()
					_ = yym93
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym94 := z.EncBinary()
					_ = yym94
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym95 := z.DecBinary()
	_ = yym95
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct96 := r.ContainerType()
		if yyct96 == codecSelferValueTypeMap1234 {
			yyl96 := r.ReadMapStart()
			if yyl96 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl96, d)
			}
		} else if yyct96 == codecSelferValueTypeArray1234 {
			yyl96 := r.ReadArrayStart()
			if yyl96 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl96, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys97Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys97Slc
	var yyhl97 bool = l >= 0
	for yyj97 := 0; ; yyj97++ {
		if yyhl97 {
			if yyj97 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys97Slc = r.DecodeBytes(yys97Slc, true, true)
		yys97 := string(yys97Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys97 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys97)
		} // end switch yys97
	} // end for yyj97
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj102 int
	var yyb102 bool
	var yyhl102 bool = l >= 0
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj102++
		if yyhl102 {
			yyb102 = yyj102 > l
		} else {
			yyb102 = r.CheckBreak()
		}
		if yyb102 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj102-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym107 := z.EncBinary()
		_ = yym107
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep108 := !z.EncBinary()
			yy2arr108 := z.EncBasicHandle().StructToArray
			var yyq108 [1]bool
			_, _, _ = yysep108, yyq108, yy2arr108
			const yyr108 bool = false
			var yynn108 int
			if yyr108 || yy2arr108 {
				r.EncodeArrayStart(1)
			} else {
				yynn108 = 1
				for _, b := range yyq108 {
					if b {
						yynn108++
					}
				}
				r.EncodeMapStart(yynn108)
				yynn108 = 0
			}
			if yyr108 || yy2arr108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym110 := z.EncBinary()
				_ = yym110
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym111 := z.EncBinary()
				_ = yym111
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yyr108 || yy2arr108 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym112 := z.DecBinary()
	_ = yym112
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct113 := r.ContainerType()
		if yyct113 == codecSelferValueTypeMap1234 {
			yyl113 := r.ReadMapStart()
			if yyl113 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl113, d)
			}
		} else if yyct113 == codecSelferValueTypeArray1234 {
			yyl113 := r.ReadArrayStart()
			if yyl113 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl113, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys114Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys114Slc
	var yyhl114 bool = l >= 0
	for yyj114 := 0; ; yyj114++ {
		if yyhl114 {
			if yyj114 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys114Slc = r.DecodeBytes(yys114Slc, true, true)
		yys114 := string(yys114Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys114 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys114)
		} // end switch yys114
	} // end for yyj114
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj116 int
	var yyb116 bool
	var yyhl116 bool = l >= 0
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj116++
		if yyhl116 {
			yyb116 = yyj116 > l
		} else {
			yyb116 = r.CheckBreak()
		}
		if yyb116 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj116-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym118 := z.EncBinary()
		_ = yym118
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep119 := !z.EncBinary()
			yy2arr119 := z.EncBasicHandle().StructToArray
			var yyq119 [4]bool
			_, _, _ = yysep119, yyq119, yy2arr119
			const yyr119 bool = false
			yyq119[1] = x.MinReplicas != nil
			yyq119[3] = x.CPUUtilization != nil
			var yynn119 int
			if yyr119 || yy2arr119 {
				r.EncodeArrayStart(4)
			} else {
				yynn119 = 2
				for _, b := range yyq119 {
					if b {
						yynn119++
					}
				}
				r.EncodeMapStart(yynn119)
				yynn119 = 0
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy121 := &x.ScaleRef
				yy121.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy122 := &x.ScaleRef
				yy122.CodecEncodeSelf(e)
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq119[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy124 := *x.MinReplicas
						yym125 := z.EncBinary()
						_ = yym125
						if false {
						} else {
							r.EncodeInt(int64(yy124))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq119[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy126 := *x.MinReplicas
						yym127 := z.EncBinary()
						_ = yym127
						if false {
						} else {
							r.EncodeInt(int64(yy126))
						}
					}
				}
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym129 := z.EncBinary()
				_ = yym129
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym130 := z.EncBinary()
				_ = yym130
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq119[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq119[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym132 := z.DecBinary()
	_ = yym132
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct133 := r.ContainerType()
		if yyct133 == codecSelferValueTypeMap1234 {
			yyl133 := r.ReadMapStart()
			if yyl133 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl133, d)
			}
		} else if yyct133 == codecSelferValueTypeArray1234 {
			yyl133 := r.ReadArrayStart()
			if yyl133 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl133, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys134Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys134Slc
	var yyhl134 bool = l >= 0
	for yyj134 := 0; ; yyj134++ {
		if yyhl134 {
			if yyj134 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys134Slc = r.DecodeBytes(yys134Slc, true, true)
		yys134 := string(yys134Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys134 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv135 := &x.ScaleRef
				yyv135.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int)
				}
				yym137 := z.DecBinary()
				_ = yym137
				if false {
				} else {
					*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys134)
		} // end switch yys134
	} // end for yyj134
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj140 int
	var yyb140 bool
	var yyhl140 bool = l >= 0
	yyj140++
	if yyhl140 {
		yyb140 = yyj140 > l
	} else {
		yyb140 = r.CheckBreak()
	}
	if yyb140 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv141 := &x.ScaleRef
		yyv141.CodecDecodeSelf(d)
	}
	yyj140++
	if yyhl140 {
		yyb140 = yyj140 > l
	} else {
		yyb140 = r.CheckBreak()
	}
	if yyb140 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int)
		}
		yym143 := z.DecBinary()
		_ = yym143
		if false {
		} else {
			*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj140++
	if yyhl140 {
		yyb140 = yyj140 > l
	} else {
		yyb140 = r.CheckBreak()
	}
	if yyb140 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj140++
	if yyhl140 {
		yyb140 = yyj140 > l
	} else {
		yyb140 = r.CheckBreak()
	}
	if yyb140 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj140++
		if yyhl140 {
			yyb140 = yyj140 > l
		} else {
			yyb140 = r.CheckBreak()
		}
		if yyb140 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj140-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym146 := z.EncBinary()
		_ = yym146
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep147 := !z.EncBinary()
			yy2arr147 := z.EncBasicHandle().StructToArray
			var yyq147 [5]bool
			_, _, _ = yysep147, yyq147, yy2arr147
			const yyr147 bool = false
			yyq147[0] = x.ObservedGeneration != nil
			yyq147[1] = x.LastScaleTime != nil
			yyq147[4] = x.CurrentCPUUtilizationPercentage != nil
			var yynn147 int
			if yyr147 || yy2arr147 {
				r.EncodeArrayStart(5)
			} else {
				yynn147 = 2
				for _, b := range yyq147 {
					if b {
						yynn147++
					}
				}
				r.EncodeMapStart(yynn147)
				yynn147 = 0
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy149 := *x.ObservedGeneration
						yym150 := z.EncBinary()
						_ = yym150
						if false {
						} else {
							r.EncodeInt(int64(yy149))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy151 := *x.ObservedGeneration
						yym152 := z.EncBinary()
						_ = yym152
						if false {
						} else {
							r.EncodeInt(int64(yy151))
						}
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym154 := z.EncBinary()
						_ = yym154
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym154 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym154 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym155 := z.EncBinary()
						_ = yym155
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym155 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym155 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym157 := z.EncBinary()
				_ = yym157
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym158 := z.EncBinary()
				_ = yym158
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym160 := z.EncBinary()
				_ = yym160
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym161 := z.EncBinary()
				_ = yym161
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy163 := *x.CurrentCPUUtilizationPercentage
						yym164 := z.EncBinary()
						_ = yym164
						if false {
						} else {
							r.EncodeInt(int64(yy163))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy165 := *x.CurrentCPUUtilizationPercentage
						yym166 := z.EncBinary()
						_ = yym166
						if false {
						} else {
							r.EncodeInt(int64(yy165))
						}
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym167 := z.DecBinary()
	_ = yym167
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct168 := r.ContainerType()
		if yyct168 == codecSelferValueTypeMap1234 {
			yyl168 := r.ReadMapStart()
			if yyl168 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl168, d)
			}
		} else if yyct168 == codecSelferValueTypeArray1234 {
			yyl168 := r.ReadArrayStart()
			if yyl168 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl168, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys169Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys169Slc
	var yyhl169 bool = l >= 0
	for yyj169 := 0; ; yyj169++ {
		if yyhl169 {
			if yyj169 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys169Slc = r.DecodeBytes(yys169Slc, true, true)
		yys169 := string(yys169Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys169 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym171 := z.DecBinary()
				_ = yym171
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym173 := z.DecBinary()
				_ = yym173
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym173 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym173 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int)
				}
				yym177 := z.DecBinary()
				_ = yym177
				if false {
				} else {
					*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys169)
		} // end switch yys169
	} // end for yyj169
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj178 int
	var yyb178 bool
	var yyhl178 bool = l >= 0
	yyj178++
	if yyhl178 {
		yyb178 = yyj178 > l
	} else {
		yyb178 = r.CheckBreak()
	}
	if yyb178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym180 := z.DecBinary()
		_ = yym180
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj178++
	if yyhl178 {
		yyb178 = yyj178 > l
	} else {
		yyb178 = r.CheckBreak()
	}
	if yyb178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym182 := z.DecBinary()
		_ = yym182
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym182 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym182 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj178++
	if yyhl178 {
		yyb178 = yyj178 > l
	} else {
		yyb178 = r.CheckBreak()
	}
	if yyb178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj178++
	if yyhl178 {
		yyb178 = yyj178 > l
	} else {
		yyb178 = r.CheckBreak()
	}
	if yyb178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj178++
	if yyhl178 {
		yyb178 = yyj178 > l
	} else {
		yyb178 = r.CheckBreak()
	}
	if yyb178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int)
		}
		yym186 := z.DecBinary()
		_ = yym186
		if false {
		} else {
			*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	for {
		yyj178++
		if yyhl178 {
			yyb178 = yyj178 > l
		} else {
			yyb178 = r.CheckBreak()
		}
		if yyb178 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj178-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym187 := z.EncBinary()
		_ = yym187
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep188 := !z.EncBinary()
			yy2arr188 := z.EncBasicHandle().StructToArray
			var yyq188 [5]bool
			_, _, _ = yysep188, yyq188, yy2arr188
			const yyr188 bool = false
			yyq188[0] = x.Kind != ""
			yyq188[1] = x.APIVersion != ""
			yyq188[2] = true
			yyq188[3] = true
			yyq188[4] = true
			var yynn188 int
			if yyr188 || yy2arr188 {
				r.EncodeArrayStart(5)
			} else {
				yynn188 = 0
				for _, b := range yyq188 {
					if b {
						yynn188++
					}
				}
				r.EncodeMapStart(yynn188)
				yynn188 = 0
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[0] {
					yym190 := z.EncBinary()
					_ = yym190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq188[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym191 := z.EncBinary()
					_ = yym191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[1] {
					yym193 := z.EncBinary()
					_ = yym193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq188[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym194 := z.EncBinary()
					_ = yym194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[2] {
					yy196 := &x.ObjectMeta
					yym197 := z.EncBinary()
					_ = yym197
					if false {
					} else if z.HasExtensions() && z.EncExt(yy196) {
					} else {
						z.EncFallback(yy196)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy198 := &x.ObjectMeta
					yym199 := z.EncBinary()
					_ = yym199
					if false {
					} else if z.HasExtensions() && z.EncExt(yy198) {
					} else {
						z.EncFallback(yy198)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[3] {
					yy201 := &x.Spec
					yy201.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy202 := &x.Spec
					yy202.CodecEncodeSelf(e)
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[4] {
					yy204 := &x.Status
					yy204.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy205 := &x.Status
					yy205.CodecEncodeSelf(e)
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym206 := z.DecBinary()
	_ = yym206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct207 := r.ContainerType()
		if yyct207 == codecSelferValueTypeMap1234 {
			yyl207 := r.ReadMapStart()
			if yyl207 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl207, d)
			}
		} else if yyct207 == codecSelferValueTypeArray1234 {
			yyl207 := r.ReadArrayStart()
			if yyl207 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl207, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys208Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys208Slc
	var yyhl208 bool = l >= 0
	for yyj208 := 0; ; yyj208++ {
		if yyhl208 {
			if yyj208 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys208Slc = r.DecodeBytes(yys208Slc, true, true)
		yys208 := string(yys208Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys208 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv211 := &x.ObjectMeta
				yym212 := z.DecBinary()
				_ = yym212
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv211) {
				} else {
					z.DecFallback(yyv211, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv213 := &x.Spec
				yyv213.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv214 := &x.Status
				yyv214.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys208)
		} // end switch yys208
	} // end for yyj208
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj215 int
	var yyb215 bool
	var yyhl215 bool = l >= 0
	yyj215++
	if yyhl215 {
		yyb215 = yyj215 > l
	} else {
		yyb215 = r.CheckBreak()
	}
	if yyb215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj215++
	if yyhl215 {
		yyb215 = yyj215 > l
	} else {
		yyb215 = r.CheckBreak()
	}
	if yyb215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj215++
	if yyhl215 {
		yyb215 = yyj215 > l
	} else {
		yyb215 = r.CheckBreak()
	}
	if yyb215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv218 := &x.ObjectMeta
		yym219 := z.DecBinary()
		_ = yym219
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv218) {
		} else {
			z.DecFallback(yyv218, false)
		}
	}
	yyj215++
	if yyhl215 {
		yyb215 = yyj215 > l
	} else {
		yyb215 = r.CheckBreak()
	}
	if yyb215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv220 := &x.Spec
		yyv220.CodecDecodeSelf(d)
	}
	yyj215++
	if yyhl215 {
		yyb215 = yyj215 > l
	} else {
		yyb215 = r.CheckBreak()
	}
	if yyb215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv221 := &x.Status
		yyv221.CodecDecodeSelf(d)
	}
	for {
		yyj215++
		if yyhl215 {
			yyb215 = yyj215 > l
		} else {
			yyb215 = r.CheckBreak()
		}
		if yyb215 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj215-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym222 := z.EncBinary()
		_ = yym222
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep223 := !z.EncBinary()
			yy2arr223 := z.EncBasicHandle().StructToArray
			var yyq223 [4]bool
			_, _, _ = yysep223, yyq223, yy2arr223
			const yyr223 bool = false
			yyq223[0] = x.Kind != ""
			yyq223[1] = x.APIVersion != ""
			yyq223[2] = true
			var yynn223 int
			if yyr223 || yy2arr223 {
				r.EncodeArrayStart(4)
			} else {
				yynn223 = 1
				for _, b := range yyq223 {
					if b {
						yynn223++
					}
				}
				r.EncodeMapStart(yynn223)
				yynn223 = 0
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[0] {
					yym225 := z.EncBinary()
					_ = yym225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq223[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym226 := z.EncBinary()
					_ = yym226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[1] {
					yym228 := z.EncBinary()
					_ = yym228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq223[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym229 := z.EncBinary()
					_ = yym229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[2] {
					yy231 := &x.ListMeta
					yym232 := z.EncBinary()
					_ = yym232
					if false {
					} else if z.HasExtensions() && z.EncExt(yy231) {
					} else {
						z.EncFallback(yy231)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy233 := &x.ListMeta
					yym234 := z.EncBinary()
					_ = yym234
					if false {
					} else if z.HasExtensions() && z.EncExt(yy233) {
					} else {
						z.EncFallback(yy233)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym236 := z.EncBinary()
					_ = yym236
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym237 := z.EncBinary()
					_ = yym237
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym238 := z.DecBinary()
	_ = yym238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct239 := r.ContainerType()
		if yyct239 == codecSelferValueTypeMap1234 {
			yyl239 := r.ReadMapStart()
			if yyl239 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl239, d)
			}
		} else if yyct239 == codecSelferValueTypeArray1234 {
			yyl239 := r.ReadArrayStart()
			if yyl239 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl239, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys240Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys240Slc
	var yyhl240 bool = l >= 0
	for yyj240 := 0; ; yyj240++ {
		if yyhl240 {
			if yyj240 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys240Slc = r.DecodeBytes(yys240Slc, true, true)
		yys240 := string(yys240Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys240 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv243 := &x.ListMeta
				yym244 := z.DecBinary()
				_ = yym244
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv243) {
				} else {
					z.DecFallback(yyv243, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv245 := &x.Items
				yym246 := z.DecBinary()
				_ = yym246
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv245), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys240)
		} // end switch yys240
	} // end for yyj240
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj247 int
	var yyb247 bool
	var yyhl247 bool = l >= 0
	yyj247++
	if yyhl247 {
		yyb247 = yyj247 > l
	} else {
		yyb247 = r.CheckBreak()
	}
	if yyb247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj247++
	if yyhl247 {
		yyb247 = yyj247 > l
	} else {
		yyb247 = r.CheckBreak()
	}
	if yyb247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj247++
	if yyhl247 {
		yyb247 = yyj247 > l
	} else {
		yyb247 = r.CheckBreak()
	}
	if yyb247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv250 := &x.ListMeta
		yym251 := z.DecBinary()
		_ = yym251
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv250) {
		} else {
			z.DecFallback(yyv250, false)
		}
	}
	yyj247++
	if yyhl247 {
		yyb247 = yyj247 > l
	} else {
		yyb247 = r.CheckBreak()
	}
	if yyb247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv252 := &x.Items
		yym253 := z.DecBinary()
		_ = yym253
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv252), d)
		}
	}
	for {
		yyj247++
		if yyhl247 {
			yyb247 = yyj247 > l
		} else {
			yyb247 = r.CheckBreak()
		}
		if yyb247 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj247-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym254 := z.EncBinary()
		_ = yym254
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep255 := !z.EncBinary()
			yy2arr255 := z.EncBasicHandle().StructToArray
			var yyq255 [5]bool
			_, _, _ = yysep255, yyq255, yy2arr255
			const yyr255 bool = false
			yyq255[0] = x.Kind != ""
			yyq255[1] = x.APIVersion != ""
			yyq255[2] = true
			yyq255[3] = x.Description != ""
			yyq255[4] = len(x.Versions) != 0
			var yynn255 int
			if yyr255 || yy2arr255 {
				r.EncodeArrayStart(5)
			} else {
				yynn255 = 0
				for _, b := range yyq255 {
					if b {
						yynn255++
					}
				}
				r.EncodeMapStart(yynn255)
				yynn255 = 0
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[0] {
					yym257 := z.EncBinary()
					_ = yym257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq255[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym258 := z.EncBinary()
					_ = yym258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[1] {
					yym260 := z.EncBinary()
					_ = yym260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq255[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym261 := z.EncBinary()
					_ = yym261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[2] {
					yy263 := &x.ObjectMeta
					yym264 := z.EncBinary()
					_ = yym264
					if false {
					} else if z.HasExtensions() && z.EncExt(yy263) {
					} else {
						z.EncFallback(yy263)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy265 := &x.ObjectMeta
					yym266 := z.EncBinary()
					_ = yym266
					if false {
					} else if z.HasExtensions() && z.EncExt(yy265) {
					} else {
						z.EncFallback(yy265)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[3] {
					yym268 := z.EncBinary()
					_ = yym268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq255[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym269 := z.EncBinary()
					_ = yym269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym271 := z.EncBinary()
						_ = yym271
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym272 := z.EncBinary()
						_ = yym272
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym273 := z.DecBinary()
	_ = yym273
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct274 := r.ContainerType()
		if yyct274 == codecSelferValueTypeMap1234 {
			yyl274 := r.ReadMapStart()
			if yyl274 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl274, d)
			}
		} else if yyct274 == codecSelferValueTypeArray1234 {
			yyl274 := r.ReadArrayStart()
			if yyl274 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl274, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys275Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys275Slc
	var yyhl275 bool = l >= 0
	for yyj275 := 0; ; yyj275++ {
		if yyhl275 {
			if yyj275 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys275Slc = r.DecodeBytes(yys275Slc, true, true)
		yys275 := string(yys275Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys275 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv278 := &x.ObjectMeta
				yym279 := z.DecBinary()
				_ = yym279
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv278) {
				} else {
					z.DecFallback(yyv278, false)
				}
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv281 := &x.Versions
				yym282 := z.DecBinary()
				_ = yym282
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv281), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys275)
		} // end switch yys275
	} // end for yyj275
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj283 int
	var yyb283 bool
	var yyhl283 bool = l >= 0
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv286 := &x.ObjectMeta
		yym287 := z.DecBinary()
		_ = yym287
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv286) {
		} else {
			z.DecFallback(yyv286, false)
		}
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv289 := &x.Versions
		yym290 := z.DecBinary()
		_ = yym290
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv289), d)
		}
	}
	for {
		yyj283++
		if yyhl283 {
			yyb283 = yyj283 > l
		} else {
			yyb283 = r.CheckBreak()
		}
		if yyb283 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj283-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym291 := z.EncBinary()
		_ = yym291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep292 := !z.EncBinary()
			yy2arr292 := z.EncBasicHandle().StructToArray
			var yyq292 [4]bool
			_, _, _ = yysep292, yyq292, yy2arr292
			const yyr292 bool = false
			yyq292[0] = x.Kind != ""
			yyq292[1] = x.APIVersion != ""
			yyq292[2] = true
			var yynn292 int
			if yyr292 || yy2arr292 {
				r.EncodeArrayStart(4)
			} else {
				yynn292 = 1
				for _, b := range yyq292 {
					if b {
						yynn292++
					}
				}
				r.EncodeMapStart(yynn292)
				yynn292 = 0
			}
			if yyr292 || yy2arr292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq292[0] {
					yym294 := z.EncBinary()
					_ = yym294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq292[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym295 := z.EncBinary()
					_ = yym295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr292 || yy2arr292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq292[1] {
					yym297 := z.EncBinary()
					_ = yym297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq292[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym298 := z.EncBinary()
					_ = yym298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr292 || yy2arr292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq292[2] {
					yy300 := &x.ListMeta
					yym301 := z.EncBinary()
					_ = yym301
					if false {
					} else if z.HasExtensions() && z.EncExt(yy300) {
					} else {
						z.EncFallback(yy300)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq292[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy302 := &x.ListMeta
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else if z.HasExtensions() && z.EncExt(yy302) {
					} else {
						z.EncFallback(yy302)
					}
				}
			}
			if yyr292 || yy2arr292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym305 := z.EncBinary()
					_ = yym305
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym306 := z.EncBinary()
					_ = yym306
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yyr292 || yy2arr292 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym307 := z.DecBinary()
	_ = yym307
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct308 := r.ContainerType()
		if yyct308 == codecSelferValueTypeMap1234 {
			yyl308 := r.ReadMapStart()
			if yyl308 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl308, d)
			}
		} else if yyct308 == codecSelferValueTypeArray1234 {
			yyl308 := r.ReadArrayStart()
			if yyl308 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl308, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys309Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys309Slc
	var yyhl309 bool = l >= 0
	for yyj309 := 0; ; yyj309++ {
		if yyhl309 {
			if yyj309 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys309Slc = r.DecodeBytes(yys309Slc, true, true)
		yys309 := string(yys309Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys309 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv312 := &x.ListMeta
				yym313 := z.DecBinary()
				_ = yym313
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv312) {
				} else {
					z.DecFallback(yyv312, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv314 := &x.Items
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv314), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys309)
		} // end switch yys309
	} // end for yyj309
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj316 int
	var yyb316 bool
	var yyhl316 bool = l >= 0
	yyj316++
	if yyhl316 {
		yyb316 = yyj316 > l
	} else {
		yyb316 = r.CheckBreak()
	}
	if yyb316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj316++
	if yyhl316 {
		yyb316 = yyj316 > l
	} else {
		yyb316 = r.CheckBreak()
	}
	if yyb316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj316++
	if yyhl316 {
		yyb316 = yyj316 > l
	} else {
		yyb316 = r.CheckBreak()
	}
	if yyb316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv319 := &x.ListMeta
		yym320 := z.DecBinary()
		_ = yym320
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv319) {
		} else {
			z.DecFallback(yyv319, false)
		}
	}
	yyj316++
	if yyhl316 {
		yyb316 = yyj316 > l
	} else {
		yyb316 = r.CheckBreak()
	}
	if yyb316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv321 := &x.Items
		yym322 := z.DecBinary()
		_ = yym322
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv321), d)
		}
	}
	for {
		yyj316++
		if yyhl316 {
			yyb316 = yyj316 > l
		} else {
			yyb316 = r.CheckBreak()
		}
		if yyb316 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj316-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym323 := z.EncBinary()
		_ = yym323
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep324 := !z.EncBinary()
			yy2arr324 := z.EncBasicHandle().StructToArray
			var yyq324 [2]bool
			_, _, _ = yysep324, yyq324, yy2arr324
			const yyr324 bool = false
			yyq324[0] = x.Name != ""
			yyq324[1] = x.APIGroup != ""
			var yynn324 int
			if yyr324 || yy2arr324 {
				r.EncodeArrayStart(2)
			} else {
				yynn324 = 0
				for _, b := range yyq324 {
					if b {
						yynn324++
					}
				}
				r.EncodeMapStart(yynn324)
				yynn324 = 0
			}
			if yyr324 || yy2arr324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq324[0] {
					yym326 := z.EncBinary()
					_ = yym326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq324[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym327 := z.EncBinary()
					_ = yym327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr324 || yy2arr324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq324[1] {
					yym329 := z.EncBinary()
					_ = yym329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq324[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym330 := z.EncBinary()
					_ = yym330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yyr324 || yy2arr324 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym331 := z.DecBinary()
	_ = yym331
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct332 := r.ContainerType()
		if yyct332 == codecSelferValueTypeMap1234 {
			yyl332 := r.ReadMapStart()
			if yyl332 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl332, d)
			}
		} else if yyct332 == codecSelferValueTypeArray1234 {
			yyl332 := r.ReadArrayStart()
			if yyl332 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl332, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys333Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys333Slc
	var yyhl333 bool = l >= 0
	for yyj333 := 0; ; yyj333++ {
		if yyhl333 {
			if yyj333 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys333Slc = r.DecodeBytes(yys333Slc, true, true)
		yys333 := string(yys333Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys333 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys333)
		} // end switch yys333
	} // end for yyj333
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj336 int
	var yyb336 bool
	var yyhl336 bool = l >= 0
	yyj336++
	if yyhl336 {
		yyb336 = yyj336 > l
	} else {
		yyb336 = r.CheckBreak()
	}
	if yyb336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj336++
	if yyhl336 {
		yyb336 = yyj336 > l
	} else {
		yyb336 = r.CheckBreak()
	}
	if yyb336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj336++
		if yyhl336 {
			yyb336 = yyj336 > l
		} else {
			yyb336 = r.CheckBreak()
		}
		if yyb336 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj336-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym339 := z.EncBinary()
		_ = yym339
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep340 := !z.EncBinary()
			yy2arr340 := z.EncBasicHandle().StructToArray
			var yyq340 [4]bool
			_, _, _ = yysep340, yyq340, yy2arr340
			const yyr340 bool = false
			yyq340[0] = x.Kind != ""
			yyq340[1] = x.APIVersion != ""
			yyq340[2] = true
			yyq340[3] = len(x.Data) != 0
			var yynn340 int
			if yyr340 || yy2arr340 {
				r.EncodeArrayStart(4)
			} else {
				yynn340 = 0
				for _, b := range yyq340 {
					if b {
						yynn340++
					}
				}
				r.EncodeMapStart(yynn340)
				yynn340 = 0
			}
			if yyr340 || yy2arr340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq340[0] {
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq340[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym343 := z.EncBinary()
					_ = yym343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr340 || yy2arr340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq340[1] {
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq340[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym346 := z.EncBinary()
					_ = yym346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr340 || yy2arr340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq340[2] {
					yy348 := &x.ObjectMeta
					yym349 := z.EncBinary()
					_ = yym349
					if false {
					} else if z.HasExtensions() && z.EncExt(yy348) {
					} else {
						z.EncFallback(yy348)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq340[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy350 := &x.ObjectMeta
					yym351 := z.EncBinary()
					_ = yym351
					if false {
					} else if z.HasExtensions() && z.EncExt(yy350) {
					} else {
						z.EncFallback(yy350)
					}
				}
			}
			if yyr340 || yy2arr340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq340[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym353 := z.EncBinary()
						_ = yym353
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq340[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym354 := z.EncBinary()
						_ = yym354
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yyr340 || yy2arr340 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym355 := z.DecBinary()
	_ = yym355
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct356 := r.ContainerType()
		if yyct356 == codecSelferValueTypeMap1234 {
			yyl356 := r.ReadMapStart()
			if yyl356 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl356, d)
			}
		} else if yyct356 == codecSelferValueTypeArray1234 {
			yyl356 := r.ReadArrayStart()
			if yyl356 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl356, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys357Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys357Slc
	var yyhl357 bool = l >= 0
	for yyj357 := 0; ; yyj357++ {
		if yyhl357 {
			if yyj357 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys357Slc = r.DecodeBytes(yys357Slc, true, true)
		yys357 := string(yys357Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys357 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv360 := &x.ObjectMeta
				yym361 := z.DecBinary()
				_ = yym361
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv360) {
				} else {
					z.DecFallback(yyv360, false)
				}
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv362 := &x.Data
				yym363 := z.DecBinary()
				_ = yym363
				if false {
				} else {
					*yyv362 = r.DecodeBytes(*(*[]byte)(yyv362), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys357)
		} // end switch yys357
	} // end for yyj357
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj364 int
	var yyb364 bool
	var yyhl364 bool = l >= 0
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv367 := &x.ObjectMeta
		yym368 := z.DecBinary()
		_ = yym368
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv367) {
		} else {
			z.DecFallback(yyv367, false)
		}
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv369 := &x.Data
		yym370 := z.DecBinary()
		_ = yym370
		if false {
		} else {
			*yyv369 = r.DecodeBytes(*(*[]byte)(yyv369), false, false)
		}
	}
	for {
		yyj364++
		if yyhl364 {
			yyb364 = yyj364 > l
		} else {
			yyb364 = r.CheckBreak()
		}
		if yyb364 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj364-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym371 := z.EncBinary()
		_ = yym371
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep372 := !z.EncBinary()
			yy2arr372 := z.EncBasicHandle().StructToArray
			var yyq372 [5]bool
			_, _, _ = yysep372, yyq372, yy2arr372
			const yyr372 bool = false
			yyq372[0] = x.Kind != ""
			yyq372[1] = x.APIVersion != ""
			yyq372[2] = true
			yyq372[3] = true
			yyq372[4] = true
			var yynn372 int
			if yyr372 || yy2arr372 {
				r.EncodeArrayStart(5)
			} else {
				yynn372 = 0
				for _, b := range yyq372 {
					if b {
						yynn372++
					}
				}
				r.EncodeMapStart(yynn372)
				yynn372 = 0
			}
			if yyr372 || yy2arr372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq372[0] {
					yym374 := z.EncBinary()
					_ = yym374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq372[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym375 := z.EncBinary()
					_ = yym375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr372 || yy2arr372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq372[1] {
					yym377 := z.EncBinary()
					_ = yym377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq372[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym378 := z.EncBinary()
					_ = yym378
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr372 || yy2arr372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq372[2] {
					yy380 := &x.ObjectMeta
					yym381 := z.EncBinary()
					_ = yym381
					if false {
					} else if z.HasExtensions() && z.EncExt(yy380) {
					} else {
						z.EncFallback(yy380)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq372[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy382 := &x.ObjectMeta
					yym383 := z.EncBinary()
					_ = yym383
					if false {
					} else if z.HasExtensions() && z.EncExt(yy382) {
					} else {
						z.EncFallback(yy382)
					}
				}
			}
			if yyr372 || yy2arr372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq372[3] {
					yy385 := &x.Spec
					yy385.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq372[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy386 := &x.Spec
					yy386.CodecEncodeSelf(e)
				}
			}
			if yyr372 || yy2arr372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq372[4] {
					yy388 := &x.Status
					yy388.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq372[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy389 := &x.Status
					yy389.CodecEncodeSelf(e)
				}
			}
			if yyr372 || yy2arr372 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym390 := z.DecBinary()
	_ = yym390
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct391 := r.ContainerType()
		if yyct391 == codecSelferValueTypeMap1234 {
			yyl391 := r.ReadMapStart()
			if yyl391 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl391, d)
			}
		} else if yyct391 == codecSelferValueTypeArray1234 {
			yyl391 := r.ReadArrayStart()
			if yyl391 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl391, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys392Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys392Slc
	var yyhl392 bool = l >= 0
	for yyj392 := 0; ; yyj392++ {
		if yyhl392 {
			if yyj392 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys392Slc = r.DecodeBytes(yys392Slc, true, true)
		yys392 := string(yys392Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys392 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv395 := &x.ObjectMeta
				yym396 := z.DecBinary()
				_ = yym396
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv395) {
				} else {
					z.DecFallback(yyv395, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv397 := &x.Spec
				yyv397.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv398 := &x.Status
				yyv398.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys392)
		} // end switch yys392
	} // end for yyj392
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj399 int
	var yyb399 bool
	var yyhl399 bool = l >= 0
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv402 := &x.ObjectMeta
		yym403 := z.DecBinary()
		_ = yym403
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv402) {
		} else {
			z.DecFallback(yyv402, false)
		}
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv404 := &x.Spec
		yyv404.CodecDecodeSelf(d)
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv405 := &x.Status
		yyv405.CodecDecodeSelf(d)
	}
	for {
		yyj399++
		if yyhl399 {
			yyb399 = yyj399 > l
		} else {
			yyb399 = r.CheckBreak()
		}
		if yyb399 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj399-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym406 := z.EncBinary()
		_ = yym406
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep407 := !z.EncBinary()
			yy2arr407 := z.EncBasicHandle().StructToArray
			var yyq407 [5]bool
			_, _, _ = yysep407, yyq407, yy2arr407
			const yyr407 bool = false
			yyq407[0] = x.Replicas != 0
			yyq407[1] = len(x.Selector) != 0
			yyq407[3] = true
			yyq407[4] = x.UniqueLabelKey != ""
			var yynn407 int
			if yyr407 || yy2arr407 {
				r.EncodeArrayStart(5)
			} else {
				yynn407 = 1
				for _, b := range yyq407 {
					if b {
						yynn407++
					}
				}
				r.EncodeMapStart(yynn407)
				yynn407 = 0
			}
			if yyr407 || yy2arr407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq407[0] {
					yym409 := z.EncBinary()
					_ = yym409
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq407[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym410 := z.EncBinary()
					_ = yym410
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr407 || yy2arr407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq407[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym412 := z.EncBinary()
						_ = yym412
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq407[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym413 := z.EncBinary()
						_ = yym413
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr407 || yy2arr407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy415 := &x.Template
				yym416 := z.EncBinary()
				_ = yym416
				if false {
				} else if z.HasExtensions() && z.EncExt(yy415) {
				} else {
					z.EncFallback(yy415)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy417 := &x.Template
				yym418 := z.EncBinary()
				_ = yym418
				if false {
				} else if z.HasExtensions() && z.EncExt(yy417) {
				} else {
					z.EncFallback(yy417)
				}
			}
			if yyr407 || yy2arr407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq407[3] {
					yy420 := &x.Strategy
					yy420.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq407[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy421 := &x.Strategy
					yy421.CodecEncodeSelf(e)
				}
			}
			if yyr407 || yy2arr407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq407[4] {
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq407[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym424 := z.EncBinary()
					_ = yym424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				}
			}
			if yyr407 || yy2arr407 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym425 := z.DecBinary()
	_ = yym425
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct426 := r.ContainerType()
		if yyct426 == codecSelferValueTypeMap1234 {
			yyl426 := r.ReadMapStart()
			if yyl426 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl426, d)
			}
		} else if yyct426 == codecSelferValueTypeArray1234 {
			yyl426 := r.ReadArrayStart()
			if yyl426 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl426, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys427Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys427Slc
	var yyhl427 bool = l >= 0
	for yyj427 := 0; ; yyj427++ {
		if yyhl427 {
			if yyj427 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys427Slc = r.DecodeBytes(yys427Slc, true, true)
		yys427 := string(yys427Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys427 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv429 := &x.Selector
				yym430 := z.DecBinary()
				_ = yym430
				if false {
				} else {
					z.F.DecMapStringStringX(yyv429, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv431 := &x.Template
				yym432 := z.DecBinary()
				_ = yym432
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv431) {
				} else {
					z.DecFallback(yyv431, false)
				}
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv433 := &x.Strategy
				yyv433.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				x.UniqueLabelKey = ""
			} else {
				x.UniqueLabelKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys427)
		} // end switch yys427
	} // end for yyj427
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj435 int
	var yyb435 bool
	var yyhl435 bool = l >= 0
	yyj435++
	if yyhl435 {
		yyb435 = yyj435 > l
	} else {
		yyb435 = r.CheckBreak()
	}
	if yyb435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj435++
	if yyhl435 {
		yyb435 = yyj435 > l
	} else {
		yyb435 = r.CheckBreak()
	}
	if yyb435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv437 := &x.Selector
		yym438 := z.DecBinary()
		_ = yym438
		if false {
		} else {
			z.F.DecMapStringStringX(yyv437, false, d)
		}
	}
	yyj435++
	if yyhl435 {
		yyb435 = yyj435 > l
	} else {
		yyb435 = r.CheckBreak()
	}
	if yyb435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv439 := &x.Template
		yym440 := z.DecBinary()
		_ = yym440
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv439) {
		} else {
			z.DecFallback(yyv439, false)
		}
	}
	yyj435++
	if yyhl435 {
		yyb435 = yyj435 > l
	} else {
		yyb435 = r.CheckBreak()
	}
	if yyb435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv441 := &x.Strategy
		yyv441.CodecDecodeSelf(d)
	}
	yyj435++
	if yyhl435 {
		yyb435 = yyj435 > l
	} else {
		yyb435 = r.CheckBreak()
	}
	if yyb435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UniqueLabelKey = ""
	} else {
		x.UniqueLabelKey = string(r.DecodeString())
	}
	for {
		yyj435++
		if yyhl435 {
			yyb435 = yyj435 > l
		} else {
			yyb435 = r.CheckBreak()
		}
		if yyb435 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj435-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym443 := z.EncBinary()
		_ = yym443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep444 := !z.EncBinary()
			yy2arr444 := z.EncBasicHandle().StructToArray
			var yyq444 [2]bool
			_, _, _ = yysep444, yyq444, yy2arr444
			const yyr444 bool = false
			yyq444[0] = x.Type != ""
			yyq444[1] = x.RollingUpdate != nil
			var yynn444 int
			if yyr444 || yy2arr444 {
				r.EncodeArrayStart(2)
			} else {
				yynn444 = 0
				for _, b := range yyq444 {
					if b {
						yynn444++
					}
				}
				r.EncodeMapStart(yynn444)
				yynn444 = 0
			}
			if yyr444 || yy2arr444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq444[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq444[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr444 || yy2arr444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq444[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq444[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr444 || yy2arr444 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym447 := z.DecBinary()
	_ = yym447
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct448 := r.ContainerType()
		if yyct448 == codecSelferValueTypeMap1234 {
			yyl448 := r.ReadMapStart()
			if yyl448 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl448, d)
			}
		} else if yyct448 == codecSelferValueTypeArray1234 {
			yyl448 := r.ReadArrayStart()
			if yyl448 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl448, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys449Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys449Slc
	var yyhl449 bool = l >= 0
	for yyj449 := 0; ; yyj449++ {
		if yyhl449 {
			if yyj449 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys449Slc = r.DecodeBytes(yys449Slc, true, true)
		yys449 := string(yys449Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys449 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys449)
		} // end switch yys449
	} // end for yyj449
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj452 int
	var yyb452 bool
	var yyhl452 bool = l >= 0
	yyj452++
	if yyhl452 {
		yyb452 = yyj452 > l
	} else {
		yyb452 = r.CheckBreak()
	}
	if yyb452 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj452++
	if yyhl452 {
		yyb452 = yyj452 > l
	} else {
		yyb452 = r.CheckBreak()
	}
	if yyb452 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj452++
		if yyhl452 {
			yyb452 = yyj452 > l
		} else {
			yyb452 = r.CheckBreak()
		}
		if yyb452 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj452-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym455 := z.EncBinary()
	_ = yym455
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym456 := z.DecBinary()
	_ = yym456
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym457 := z.EncBinary()
		_ = yym457
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep458 := !z.EncBinary()
			yy2arr458 := z.EncBasicHandle().StructToArray
			var yyq458 [3]bool
			_, _, _ = yysep458, yyq458, yy2arr458
			const yyr458 bool = false
			yyq458[0] = true
			yyq458[1] = true
			yyq458[2] = x.MinReadySeconds != 0
			var yynn458 int
			if yyr458 || yy2arr458 {
				r.EncodeArrayStart(3)
			} else {
				yynn458 = 0
				for _, b := range yyq458 {
					if b {
						yynn458++
					}
				}
				r.EncodeMapStart(yynn458)
				yynn458 = 0
			}
			if yyr458 || yy2arr458 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq458[0] {
					yy460 := &x.MaxUnavailable
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else if z.HasExtensions() && z.EncExt(yy460) {
					} else if !yym461 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy460)
					} else {
						z.EncFallback(yy460)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq458[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy462 := &x.MaxUnavailable
					yym463 := z.EncBinary()
					_ = yym463
					if false {
					} else if z.HasExtensions() && z.EncExt(yy462) {
					} else if !yym463 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy462)
					} else {
						z.EncFallback(yy462)
					}
				}
			}
			if yyr458 || yy2arr458 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq458[1] {
					yy465 := &x.MaxSurge
					yym466 := z.EncBinary()
					_ = yym466
					if false {
					} else if z.HasExtensions() && z.EncExt(yy465) {
					} else if !yym466 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy465)
					} else {
						z.EncFallback(yy465)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq458[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy467 := &x.MaxSurge
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else if z.HasExtensions() && z.EncExt(yy467) {
					} else if !yym468 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy467)
					} else {
						z.EncFallback(yy467)
					}
				}
			}
			if yyr458 || yy2arr458 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq458[2] {
					yym470 := z.EncBinary()
					_ = yym470
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq458[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym471 := z.EncBinary()
					_ = yym471
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr458 || yy2arr458 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym472 := z.DecBinary()
	_ = yym472
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct473 := r.ContainerType()
		if yyct473 == codecSelferValueTypeMap1234 {
			yyl473 := r.ReadMapStart()
			if yyl473 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl473, d)
			}
		} else if yyct473 == codecSelferValueTypeArray1234 {
			yyl473 := r.ReadArrayStart()
			if yyl473 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl473, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys474Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys474Slc
	var yyhl474 bool = l >= 0
	for yyj474 := 0; ; yyj474++ {
		if yyhl474 {
			if yyj474 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys474Slc = r.DecodeBytes(yys474Slc, true, true)
		yys474 := string(yys474Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys474 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg6_intstr.IntOrString{}
			} else {
				yyv475 := &x.MaxUnavailable
				yym476 := z.DecBinary()
				_ = yym476
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv475) {
				} else if !yym476 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv475)
				} else {
					z.DecFallback(yyv475, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				x.MaxSurge = pkg6_intstr.IntOrString{}
			} else {
				yyv477 := &x.MaxSurge
				yym478 := z.DecBinary()
				_ = yym478
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv477) {
				} else if !yym478 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv477)
				} else {
					z.DecFallback(yyv477, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys474)
		} // end switch yys474
	} // end for yyj474
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj480 int
	var yyb480 bool
	var yyhl480 bool = l >= 0
	yyj480++
	if yyhl480 {
		yyb480 = yyj480 > l
	} else {
		yyb480 = r.CheckBreak()
	}
	if yyb480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg6_intstr.IntOrString{}
	} else {
		yyv481 := &x.MaxUnavailable
		yym482 := z.DecBinary()
		_ = yym482
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv481) {
		} else if !yym482 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv481)
		} else {
			z.DecFallback(yyv481, false)
		}
	}
	yyj480++
	if yyhl480 {
		yyb480 = yyj480 > l
	} else {
		yyb480 = r.CheckBreak()
	}
	if yyb480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxSurge = pkg6_intstr.IntOrString{}
	} else {
		yyv483 := &x.MaxSurge
		yym484 := z.DecBinary()
		_ = yym484
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv483) {
		} else if !yym484 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv483)
		} else {
			z.DecFallback(yyv483, false)
		}
	}
	yyj480++
	if yyhl480 {
		yyb480 = yyj480 > l
	} else {
		yyb480 = r.CheckBreak()
	}
	if yyb480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj480++
		if yyhl480 {
			yyb480 = yyj480 > l
		} else {
			yyb480 = r.CheckBreak()
		}
		if yyb480 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj480-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym486 := z.EncBinary()
		_ = yym486
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep487 := !z.EncBinary()
			yy2arr487 := z.EncBasicHandle().StructToArray
			var yyq487 [2]bool
			_, _, _ = yysep487, yyq487, yy2arr487
			const yyr487 bool = false
			yyq487[0] = x.Replicas != 0
			yyq487[1] = x.UpdatedReplicas != 0
			var yynn487 int
			if yyr487 || yy2arr487 {
				r.EncodeArrayStart(2)
			} else {
				yynn487 = 0
				for _, b := range yyq487 {
					if b {
						yynn487++
					}
				}
				r.EncodeMapStart(yynn487)
				yynn487 = 0
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq487[0] {
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq487[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym490 := z.EncBinary()
					_ = yym490
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq487[1] {
					yym492 := z.EncBinary()
					_ = yym492
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq487[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym493 := z.EncBinary()
					_ = yym493
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct495 := r.ContainerType()
		if yyct495 == codecSelferValueTypeMap1234 {
			yyl495 := r.ReadMapStart()
			if yyl495 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl495, d)
			}
		} else if yyct495 == codecSelferValueTypeArray1234 {
			yyl495 := r.ReadArrayStart()
			if yyl495 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl495, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys496Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys496Slc
	var yyhl496 bool = l >= 0
	for yyj496 := 0; ; yyj496++ {
		if yyhl496 {
			if yyj496 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys496Slc = r.DecodeBytes(yys496Slc, true, true)
		yys496 := string(yys496Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys496 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys496)
		} // end switch yys496
	} // end for yyj496
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj499 int
	var yyb499 bool
	var yyhl499 bool = l >= 0
	yyj499++
	if yyhl499 {
		yyb499 = yyj499 > l
	} else {
		yyb499 = r.CheckBreak()
	}
	if yyb499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj499++
	if yyhl499 {
		yyb499 = yyj499 > l
	} else {
		yyb499 = r.CheckBreak()
	}
	if yyb499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj499++
		if yyhl499 {
			yyb499 = yyj499 > l
		} else {
			yyb499 = r.CheckBreak()
		}
		if yyb499 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj499-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym502 := z.EncBinary()
		_ = yym502
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep503 := !z.EncBinary()
			yy2arr503 := z.EncBasicHandle().StructToArray
			var yyq503 [4]bool
			_, _, _ = yysep503, yyq503, yy2arr503
			const yyr503 bool = false
			yyq503[0] = x.Kind != ""
			yyq503[1] = x.APIVersion != ""
			yyq503[2] = true
			var yynn503 int
			if yyr503 || yy2arr503 {
				r.EncodeArrayStart(4)
			} else {
				yynn503 = 1
				for _, b := range yyq503 {
					if b {
						yynn503++
					}
				}
				r.EncodeMapStart(yynn503)
				yynn503 = 0
			}
			if yyr503 || yy2arr503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq503[0] {
					yym505 := z.EncBinary()
					_ = yym505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq503[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym506 := z.EncBinary()
					_ = yym506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr503 || yy2arr503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq503[1] {
					yym508 := z.EncBinary()
					_ = yym508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq503[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym509 := z.EncBinary()
					_ = yym509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr503 || yy2arr503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq503[2] {
					yy511 := &x.ListMeta
					yym512 := z.EncBinary()
					_ = yym512
					if false {
					} else if z.HasExtensions() && z.EncExt(yy511) {
					} else {
						z.EncFallback(yy511)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq503[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy513 := &x.ListMeta
					yym514 := z.EncBinary()
					_ = yym514
					if false {
					} else if z.HasExtensions() && z.EncExt(yy513) {
					} else {
						z.EncFallback(yy513)
					}
				}
			}
			if yyr503 || yy2arr503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym516 := z.EncBinary()
					_ = yym516
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym517 := z.EncBinary()
					_ = yym517
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yyr503 || yy2arr503 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym518 := z.DecBinary()
	_ = yym518
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct519 := r.ContainerType()
		if yyct519 == codecSelferValueTypeMap1234 {
			yyl519 := r.ReadMapStart()
			if yyl519 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl519, d)
			}
		} else if yyct519 == codecSelferValueTypeArray1234 {
			yyl519 := r.ReadArrayStart()
			if yyl519 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl519, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys520Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys520Slc
	var yyhl520 bool = l >= 0
	for yyj520 := 0; ; yyj520++ {
		if yyhl520 {
			if yyj520 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys520Slc = r.DecodeBytes(yys520Slc, true, true)
		yys520 := string(yys520Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys520 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv523 := &x.ListMeta
				yym524 := z.DecBinary()
				_ = yym524
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv523) {
				} else {
					z.DecFallback(yyv523, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv525 := &x.Items
				yym526 := z.DecBinary()
				_ = yym526
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv525), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys520)
		} // end switch yys520
	} // end for yyj520
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj527 int
	var yyb527 bool
	var yyhl527 bool = l >= 0
	yyj527++
	if yyhl527 {
		yyb527 = yyj527 > l
	} else {
		yyb527 = r.CheckBreak()
	}
	if yyb527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj527++
	if yyhl527 {
		yyb527 = yyj527 > l
	} else {
		yyb527 = r.CheckBreak()
	}
	if yyb527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj527++
	if yyhl527 {
		yyb527 = yyj527 > l
	} else {
		yyb527 = r.CheckBreak()
	}
	if yyb527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv530 := &x.ListMeta
		yym531 := z.DecBinary()
		_ = yym531
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv530) {
		} else {
			z.DecFallback(yyv530, false)
		}
	}
	yyj527++
	if yyhl527 {
		yyb527 = yyj527 > l
	} else {
		yyb527 = r.CheckBreak()
	}
	if yyb527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv532 := &x.Items
		yym533 := z.DecBinary()
		_ = yym533
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv532), d)
		}
	}
	for {
		yyj527++
		if yyhl527 {
			yyb527 = yyj527 > l
		} else {
			yyb527 = r.CheckBreak()
		}
		if yyb527 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj527-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym534 := z.EncBinary()
		_ = yym534
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep535 := !z.EncBinary()
			yy2arr535 := z.EncBasicHandle().StructToArray
			var yyq535 [2]bool
			_, _, _ = yysep535, yyq535, yy2arr535
			const yyr535 bool = false
			yyq535[0] = x.Selector != nil
			yyq535[1] = x.Template != nil
			var yynn535 int
			if yyr535 || yy2arr535 {
				r.EncodeArrayStart(2)
			} else {
				yynn535 = 0
				for _, b := range yyq535 {
					if b {
						yynn535++
					}
				}
				r.EncodeMapStart(yynn535)
				yynn535 = 0
			}
			if yyr535 || yy2arr535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq535[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq535[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr535 || yy2arr535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq535[1] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym538 := z.EncBinary()
						_ = yym538
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq535[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym539 := z.EncBinary()
						_ = yym539
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				}
			}
			if yyr535 || yy2arr535 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym540 := z.DecBinary()
	_ = yym540
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct541 := r.ContainerType()
		if yyct541 == codecSelferValueTypeMap1234 {
			yyl541 := r.ReadMapStart()
			if yyl541 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl541, d)
			}
		} else if yyct541 == codecSelferValueTypeArray1234 {
			yyl541 := r.ReadArrayStart()
			if yyl541 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl541, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys542Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys542Slc
	var yyhl542 bool = l >= 0
	for yyj542 := 0; ; yyj542++ {
		if yyhl542 {
			if yyj542 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys542Slc = r.DecodeBytes(yys542Slc, true, true)
		yys542 := string(yys542Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys542 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_api.PodTemplateSpec)
				}
				yym545 := z.DecBinary()
				_ = yym545
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Template) {
				} else {
					z.DecFallback(x.Template, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys542)
		} // end switch yys542
	} // end for yyj542
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj546 int
	var yyb546 bool
	var yyhl546 bool = l >= 0
	yyj546++
	if yyhl546 {
		yyb546 = yyj546 > l
	} else {
		yyb546 = r.CheckBreak()
	}
	if yyb546 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj546++
	if yyhl546 {
		yyb546 = yyj546 > l
	} else {
		yyb546 = r.CheckBreak()
	}
	if yyb546 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_api.PodTemplateSpec)
		}
		yym549 := z.DecBinary()
		_ = yym549
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Template) {
		} else {
			z.DecFallback(x.Template, false)
		}
	}
	for {
		yyj546++
		if yyhl546 {
			yyb546 = yyj546 > l
		} else {
			yyb546 = r.CheckBreak()
		}
		if yyb546 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj546-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym550 := z.EncBinary()
		_ = yym550
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep551 := !z.EncBinary()
			yy2arr551 := z.EncBasicHandle().StructToArray
			var yyq551 [3]bool
			_, _, _ = yysep551, yyq551, yy2arr551
			const yyr551 bool = false
			var yynn551 int
			if yyr551 || yy2arr551 {
				r.EncodeArrayStart(3)
			} else {
				yynn551 = 3
				for _, b := range yyq551 {
					if b {
						yynn551++
					}
				}
				r.EncodeMapStart(yynn551)
				yynn551 = 0
			}
			if yyr551 || yy2arr551 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym553 := z.EncBinary()
				_ = yym553
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym554 := z.EncBinary()
				_ = yym554
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr551 || yy2arr551 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym556 := z.EncBinary()
				_ = yym556
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym557 := z.EncBinary()
				_ = yym557
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr551 || yy2arr551 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym559 := z.EncBinary()
				_ = yym559
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym560 := z.EncBinary()
				_ = yym560
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yyr551 || yy2arr551 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym561 := z.DecBinary()
	_ = yym561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct562 := r.ContainerType()
		if yyct562 == codecSelferValueTypeMap1234 {
			yyl562 := r.ReadMapStart()
			if yyl562 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl562, d)
			}
		} else if yyct562 == codecSelferValueTypeArray1234 {
			yyl562 := r.ReadArrayStart()
			if yyl562 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl562, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys563Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys563Slc
	var yyhl563 bool = l >= 0
	for yyj563 := 0; ; yyj563++ {
		if yyhl563 {
			if yyj563 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys563Slc = r.DecodeBytes(yys563Slc, true, true)
		yys563 := string(yys563Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys563 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys563)
		} // end switch yys563
	} // end for yyj563
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj567 int
	var yyb567 bool
	var yyhl567 bool = l >= 0
	yyj567++
	if yyhl567 {
		yyb567 = yyj567 > l
	} else {
		yyb567 = r.CheckBreak()
	}
	if yyb567 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj567++
	if yyhl567 {
		yyb567 = yyj567 > l
	} else {
		yyb567 = r.CheckBreak()
	}
	if yyb567 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj567++
	if yyhl567 {
		yyb567 = yyj567 > l
	} else {
		yyb567 = r.CheckBreak()
	}
	if yyb567 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj567++
		if yyhl567 {
			yyb567 = yyj567 > l
		} else {
			yyb567 = r.CheckBreak()
		}
		if yyb567 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj567-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym571 := z.EncBinary()
		_ = yym571
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep572 := !z.EncBinary()
			yy2arr572 := z.EncBasicHandle().StructToArray
			var yyq572 [5]bool
			_, _, _ = yysep572, yyq572, yy2arr572
			const yyr572 bool = false
			yyq572[0] = x.Kind != ""
			yyq572[1] = x.APIVersion != ""
			yyq572[2] = true
			yyq572[3] = true
			yyq572[4] = true
			var yynn572 int
			if yyr572 || yy2arr572 {
				r.EncodeArrayStart(5)
			} else {
				yynn572 = 0
				for _, b := range yyq572 {
					if b {
						yynn572++
					}
				}
				r.EncodeMapStart(yynn572)
				yynn572 = 0
			}
			if yyr572 || yy2arr572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq572[0] {
					yym574 := z.EncBinary()
					_ = yym574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq572[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym575 := z.EncBinary()
					_ = yym575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr572 || yy2arr572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq572[1] {
					yym577 := z.EncBinary()
					_ = yym577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq572[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym578 := z.EncBinary()
					_ = yym578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr572 || yy2arr572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq572[2] {
					yy580 := &x.ObjectMeta
					yym581 := z.EncBinary()
					_ = yym581
					if false {
					} else if z.HasExtensions() && z.EncExt(yy580) {
					} else {
						z.EncFallback(yy580)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq572[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy582 := &x.ObjectMeta
					yym583 := z.EncBinary()
					_ = yym583
					if false {
					} else if z.HasExtensions() && z.EncExt(yy582) {
					} else {
						z.EncFallback(yy582)
					}
				}
			}
			if yyr572 || yy2arr572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq572[3] {
					yy585 := &x.Spec
					yy585.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq572[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy586 := &x.Spec
					yy586.CodecEncodeSelf(e)
				}
			}
			if yyr572 || yy2arr572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq572[4] {
					yy588 := &x.Status
					yy588.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq572[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy589 := &x.Status
					yy589.CodecEncodeSelf(e)
				}
			}
			if yyr572 || yy2arr572 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym590 := z.DecBinary()
	_ = yym590
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct591 := r.ContainerType()
		if yyct591 == codecSelferValueTypeMap1234 {
			yyl591 := r.ReadMapStart()
			if yyl591 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl591, d)
			}
		} else if yyct591 == codecSelferValueTypeArray1234 {
			yyl591 := r.ReadArrayStart()
			if yyl591 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl591, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys592Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys592Slc
	var yyhl592 bool = l >= 0
	for yyj592 := 0; ; yyj592++ {
		if yyhl592 {
			if yyj592 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys592Slc = r.DecodeBytes(yys592Slc, true, true)
		yys592 := string(yys592Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys592 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv595 := &x.ObjectMeta
				yym596 := z.DecBinary()
				_ = yym596
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv595) {
				} else {
					z.DecFallback(yyv595, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv597 := &x.Spec
				yyv597.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv598 := &x.Status
				yyv598.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys592)
		} // end switch yys592
	} // end for yyj592
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj599 int
	var yyb599 bool
	var yyhl599 bool = l >= 0
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv602 := &x.ObjectMeta
		yym603 := z.DecBinary()
		_ = yym603
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv602) {
		} else {
			z.DecFallback(yyv602, false)
		}
	}
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv604 := &x.Spec
		yyv604.CodecDecodeSelf(d)
	}
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv605 := &x.Status
		yyv605.CodecDecodeSelf(d)
	}
	for {
		yyj599++
		if yyhl599 {
			yyb599 = yyj599 > l
		} else {
			yyb599 = r.CheckBreak()
		}
		if yyb599 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj599-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym606 := z.EncBinary()
		_ = yym606
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep607 := !z.EncBinary()
			yy2arr607 := z.EncBasicHandle().StructToArray
			var yyq607 [4]bool
			_, _, _ = yysep607, yyq607, yy2arr607
			const yyr607 bool = false
			yyq607[0] = x.Kind != ""
			yyq607[1] = x.APIVersion != ""
			yyq607[2] = true
			var yynn607 int
			if yyr607 || yy2arr607 {
				r.EncodeArrayStart(4)
			} else {
				yynn607 = 1
				for _, b := range yyq607 {
					if b {
						yynn607++
					}
				}
				r.EncodeMapStart(yynn607)
				yynn607 = 0
			}
			if yyr607 || yy2arr607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq607[0] {
					yym609 := z.EncBinary()
					_ = yym609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq607[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym610 := z.EncBinary()
					_ = yym610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr607 || yy2arr607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq607[1] {
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq607[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr607 || yy2arr607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq607[2] {
					yy615 := &x.ListMeta
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else if z.HasExtensions() && z.EncExt(yy615) {
					} else {
						z.EncFallback(yy615)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq607[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy617 := &x.ListMeta
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else if z.HasExtensions() && z.EncExt(yy617) {
					} else {
						z.EncFallback(yy617)
					}
				}
			}
			if yyr607 || yy2arr607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym620 := z.EncBinary()
					_ = yym620
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yyr607 || yy2arr607 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym622 := z.DecBinary()
	_ = yym622
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct623 := r.ContainerType()
		if yyct623 == codecSelferValueTypeMap1234 {
			yyl623 := r.ReadMapStart()
			if yyl623 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl623, d)
			}
		} else if yyct623 == codecSelferValueTypeArray1234 {
			yyl623 := r.ReadArrayStart()
			if yyl623 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl623, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys624Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys624Slc
	var yyhl624 bool = l >= 0
	for yyj624 := 0; ; yyj624++ {
		if yyhl624 {
			if yyj624 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys624Slc = r.DecodeBytes(yys624Slc, true, true)
		yys624 := string(yys624Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys624 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv627 := &x.ListMeta
				yym628 := z.DecBinary()
				_ = yym628
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv627) {
				} else {
					z.DecFallback(yyv627, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv629 := &x.Items
				yym630 := z.DecBinary()
				_ = yym630
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv629), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys624)
		} // end switch yys624
	} // end for yyj624
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj631 int
	var yyb631 bool
	var yyhl631 bool = l >= 0
	yyj631++
	if yyhl631 {
		yyb631 = yyj631 > l
	} else {
		yyb631 = r.CheckBreak()
	}
	if yyb631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj631++
	if yyhl631 {
		yyb631 = yyj631 > l
	} else {
		yyb631 = r.CheckBreak()
	}
	if yyb631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj631++
	if yyhl631 {
		yyb631 = yyj631 > l
	} else {
		yyb631 = r.CheckBreak()
	}
	if yyb631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv634 := &x.ListMeta
		yym635 := z.DecBinary()
		_ = yym635
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv634) {
		} else {
			z.DecFallback(yyv634, false)
		}
	}
	yyj631++
	if yyhl631 {
		yyb631 = yyj631 > l
	} else {
		yyb631 = r.CheckBreak()
	}
	if yyb631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv636 := &x.Items
		yym637 := z.DecBinary()
		_ = yym637
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv636), d)
		}
	}
	for {
		yyj631++
		if yyhl631 {
			yyb631 = yyj631 > l
		} else {
			yyb631 = r.CheckBreak()
		}
		if yyb631 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj631-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym638 := z.EncBinary()
		_ = yym638
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep639 := !z.EncBinary()
			yy2arr639 := z.EncBasicHandle().StructToArray
			var yyq639 [4]bool
			_, _, _ = yysep639, yyq639, yy2arr639
			const yyr639 bool = false
			yyq639[0] = x.Kind != ""
			yyq639[1] = x.APIVersion != ""
			yyq639[2] = true
			var yynn639 int
			if yyr639 || yy2arr639 {
				r.EncodeArrayStart(4)
			} else {
				yynn639 = 1
				for _, b := range yyq639 {
					if b {
						yynn639++
					}
				}
				r.EncodeMapStart(yynn639)
				yynn639 = 0
			}
			if yyr639 || yy2arr639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq639[0] {
					yym641 := z.EncBinary()
					_ = yym641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq639[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym642 := z.EncBinary()
					_ = yym642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr639 || yy2arr639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq639[1] {
					yym644 := z.EncBinary()
					_ = yym644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq639[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr639 || yy2arr639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq639[2] {
					yy647 := &x.ListMeta
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else if z.HasExtensions() && z.EncExt(yy647) {
					} else {
						z.EncFallback(yy647)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq639[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy649 := &x.ListMeta
					yym650 := z.EncBinary()
					_ = yym650
					if false {
					} else if z.HasExtensions() && z.EncExt(yy649) {
					} else {
						z.EncFallback(yy649)
					}
				}
			}
			if yyr639 || yy2arr639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym652 := z.EncBinary()
					_ = yym652
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym653 := z.EncBinary()
					_ = yym653
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yyr639 || yy2arr639 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym654 := z.DecBinary()
	_ = yym654
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct655 := r.ContainerType()
		if yyct655 == codecSelferValueTypeMap1234 {
			yyl655 := r.ReadMapStart()
			if yyl655 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl655, d)
			}
		} else if yyct655 == codecSelferValueTypeArray1234 {
			yyl655 := r.ReadArrayStart()
			if yyl655 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl655, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys656Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys656Slc
	var yyhl656 bool = l >= 0
	for yyj656 := 0; ; yyj656++ {
		if yyhl656 {
			if yyj656 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys656Slc = r.DecodeBytes(yys656Slc, true, true)
		yys656 := string(yys656Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys656 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv659 := &x.ListMeta
				yym660 := z.DecBinary()
				_ = yym660
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv659) {
				} else {
					z.DecFallback(yyv659, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv661 := &x.Items
				yym662 := z.DecBinary()
				_ = yym662
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv661), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys656)
		} // end switch yys656
	} // end for yyj656
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj663 int
	var yyb663 bool
	var yyhl663 bool = l >= 0
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv666 := &x.ListMeta
		yym667 := z.DecBinary()
		_ = yym667
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv666) {
		} else {
			z.DecFallback(yyv666, false)
		}
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv668 := &x.Items
		yym669 := z.DecBinary()
		_ = yym669
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv668), d)
		}
	}
	for {
		yyj663++
		if yyhl663 {
			yyb663 = yyj663 > l
		} else {
			yyb663 = r.CheckBreak()
		}
		if yyb663 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj663-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym670 := z.EncBinary()
		_ = yym670
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep671 := !z.EncBinary()
			yy2arr671 := z.EncBasicHandle().StructToArray
			var yyq671 [5]bool
			_, _, _ = yysep671, yyq671, yy2arr671
			const yyr671 bool = false
			yyq671[0] = x.Kind != ""
			yyq671[1] = x.APIVersion != ""
			yyq671[2] = true
			yyq671[3] = true
			yyq671[4] = true
			var yynn671 int
			if yyr671 || yy2arr671 {
				r.EncodeArrayStart(5)
			} else {
				yynn671 = 0
				for _, b := range yyq671 {
					if b {
						yynn671++
					}
				}
				r.EncodeMapStart(yynn671)
				yynn671 = 0
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq671[0] {
					yym673 := z.EncBinary()
					_ = yym673
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq671[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq671[1] {
					yym676 := z.EncBinary()
					_ = yym676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq671[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym677 := z.EncBinary()
					_ = yym677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq671[2] {
					yy679 := &x.ObjectMeta
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else if z.HasExtensions() && z.EncExt(yy679) {
					} else {
						z.EncFallback(yy679)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq671[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy681 := &x.ObjectMeta
					yym682 := z.EncBinary()
					_ = yym682
					if false {
					} else if z.HasExtensions() && z.EncExt(yy681) {
					} else {
						z.EncFallback(yy681)
					}
				}
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq671[3] {
					yy684 := &x.Spec
					yy684.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq671[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy685 := &x.Spec
					yy685.CodecEncodeSelf(e)
				}
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq671[4] {
					yy687 := &x.Status
					yy687.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq671[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy688 := &x.Status
					yy688.CodecEncodeSelf(e)
				}
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym689 := z.DecBinary()
	_ = yym689
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct690 := r.ContainerType()
		if yyct690 == codecSelferValueTypeMap1234 {
			yyl690 := r.ReadMapStart()
			if yyl690 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl690, d)
			}
		} else if yyct690 == codecSelferValueTypeArray1234 {
			yyl690 := r.ReadArrayStart()
			if yyl690 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl690, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys691Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys691Slc
	var yyhl691 bool = l >= 0
	for yyj691 := 0; ; yyj691++ {
		if yyhl691 {
			if yyj691 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys691Slc = r.DecodeBytes(yys691Slc, true, true)
		yys691 := string(yys691Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys691 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv694 := &x.ObjectMeta
				yym695 := z.DecBinary()
				_ = yym695
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv694) {
				} else {
					z.DecFallback(yyv694, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv696 := &x.Spec
				yyv696.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv697 := &x.Status
				yyv697.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys691)
		} // end switch yys691
	} // end for yyj691
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj698 int
	var yyb698 bool
	var yyhl698 bool = l >= 0
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv701 := &x.ObjectMeta
		yym702 := z.DecBinary()
		_ = yym702
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv701) {
		} else {
			z.DecFallback(yyv701, false)
		}
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv703 := &x.Spec
		yyv703.CodecDecodeSelf(d)
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv704 := &x.Status
		yyv704.CodecDecodeSelf(d)
	}
	for {
		yyj698++
		if yyhl698 {
			yyb698 = yyj698 > l
		} else {
			yyb698 = r.CheckBreak()
		}
		if yyb698 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj698-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym705 := z.EncBinary()
		_ = yym705
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep706 := !z.EncBinary()
			yy2arr706 := z.EncBasicHandle().StructToArray
			var yyq706 [4]bool
			_, _, _ = yysep706, yyq706, yy2arr706
			const yyr706 bool = false
			yyq706[0] = x.Kind != ""
			yyq706[1] = x.APIVersion != ""
			yyq706[2] = true
			var yynn706 int
			if yyr706 || yy2arr706 {
				r.EncodeArrayStart(4)
			} else {
				yynn706 = 1
				for _, b := range yyq706 {
					if b {
						yynn706++
					}
				}
				r.EncodeMapStart(yynn706)
				yynn706 = 0
			}
			if yyr706 || yy2arr706 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq706[0] {
					yym708 := z.EncBinary()
					_ = yym708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq706[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym709 := z.EncBinary()
					_ = yym709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr706 || yy2arr706 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq706[1] {
					yym711 := z.EncBinary()
					_ = yym711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq706[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym712 := z.EncBinary()
					_ = yym712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr706 || yy2arr706 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq706[2] {
					yy714 := &x.ListMeta
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else if z.HasExtensions() && z.EncExt(yy714) {
					} else {
						z.EncFallback(yy714)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq706[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy716 := &x.ListMeta
					yym717 := z.EncBinary()
					_ = yym717
					if false {
					} else if z.HasExtensions() && z.EncExt(yy716) {
					} else {
						z.EncFallback(yy716)
					}
				}
			}
			if yyr706 || yy2arr706 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym719 := z.EncBinary()
					_ = yym719
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym720 := z.EncBinary()
					_ = yym720
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yyr706 || yy2arr706 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym721 := z.DecBinary()
	_ = yym721
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct722 := r.ContainerType()
		if yyct722 == codecSelferValueTypeMap1234 {
			yyl722 := r.ReadMapStart()
			if yyl722 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl722, d)
			}
		} else if yyct722 == codecSelferValueTypeArray1234 {
			yyl722 := r.ReadArrayStart()
			if yyl722 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl722, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys723Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys723Slc
	var yyhl723 bool = l >= 0
	for yyj723 := 0; ; yyj723++ {
		if yyhl723 {
			if yyj723 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys723Slc = r.DecodeBytes(yys723Slc, true, true)
		yys723 := string(yys723Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys723 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv726 := &x.ListMeta
				yym727 := z.DecBinary()
				_ = yym727
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv726) {
				} else {
					z.DecFallback(yyv726, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv728 := &x.Items
				yym729 := z.DecBinary()
				_ = yym729
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv728), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys723)
		} // end switch yys723
	} // end for yyj723
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj730 int
	var yyb730 bool
	var yyhl730 bool = l >= 0
	yyj730++
	if yyhl730 {
		yyb730 = yyj730 > l
	} else {
		yyb730 = r.CheckBreak()
	}
	if yyb730 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj730++
	if yyhl730 {
		yyb730 = yyj730 > l
	} else {
		yyb730 = r.CheckBreak()
	}
	if yyb730 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj730++
	if yyhl730 {
		yyb730 = yyj730 > l
	} else {
		yyb730 = r.CheckBreak()
	}
	if yyb730 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv733 := &x.ListMeta
		yym734 := z.DecBinary()
		_ = yym734
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv733) {
		} else {
			z.DecFallback(yyv733, false)
		}
	}
	yyj730++
	if yyhl730 {
		yyb730 = yyj730 > l
	} else {
		yyb730 = r.CheckBreak()
	}
	if yyb730 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv735 := &x.Items
		yym736 := z.DecBinary()
		_ = yym736
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv735), d)
		}
	}
	for {
		yyj730++
		if yyhl730 {
			yyb730 = yyj730 > l
		} else {
			yyb730 = r.CheckBreak()
		}
		if yyb730 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj730-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym737 := z.EncBinary()
		_ = yym737
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep738 := !z.EncBinary()
			yy2arr738 := z.EncBasicHandle().StructToArray
			var yyq738 [5]bool
			_, _, _ = yysep738, yyq738, yy2arr738
			const yyr738 bool = false
			yyq738[0] = x.Parallelism != nil
			yyq738[1] = x.Completions != nil
			yyq738[2] = x.ActiveDeadlineSeconds != nil
			yyq738[3] = x.Selector != nil
			var yynn738 int
			if yyr738 || yy2arr738 {
				r.EncodeArrayStart(5)
			} else {
				yynn738 = 1
				for _, b := range yyq738 {
					if b {
						yynn738++
					}
				}
				r.EncodeMapStart(yynn738)
				yynn738 = 0
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq738[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy740 := *x.Parallelism
						yym741 := z.EncBinary()
						_ = yym741
						if false {
						} else {
							r.EncodeInt(int64(yy740))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq738[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy742 := *x.Parallelism
						yym743 := z.EncBinary()
						_ = yym743
						if false {
						} else {
							r.EncodeInt(int64(yy742))
						}
					}
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq738[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy745 := *x.Completions
						yym746 := z.EncBinary()
						_ = yym746
						if false {
						} else {
							r.EncodeInt(int64(yy745))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq738[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy747 := *x.Completions
						yym748 := z.EncBinary()
						_ = yym748
						if false {
						} else {
							r.EncodeInt(int64(yy747))
						}
					}
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq738[2] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy750 := *x.ActiveDeadlineSeconds
						yym751 := z.EncBinary()
						_ = yym751
						if false {
						} else {
							r.EncodeInt(int64(yy750))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq738[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy752 := *x.ActiveDeadlineSeconds
						yym753 := z.EncBinary()
						_ = yym753
						if false {
						} else {
							r.EncodeInt(int64(yy752))
						}
					}
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq738[3] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq738[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy756 := &x.Template
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else if z.HasExtensions() && z.EncExt(yy756) {
				} else {
					z.EncFallback(yy756)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy758 := &x.Template
				yym759 := z.EncBinary()
				_ = yym759
				if false {
				} else if z.HasExtensions() && z.EncExt(yy758) {
				} else {
					z.EncFallback(yy758)
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym760 := z.DecBinary()
	_ = yym760
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct761 := r.ContainerType()
		if yyct761 == codecSelferValueTypeMap1234 {
			yyl761 := r.ReadMapStart()
			if yyl761 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl761, d)
			}
		} else if yyct761 == codecSelferValueTypeArray1234 {
			yyl761 := r.ReadArrayStart()
			if yyl761 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl761, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys762Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys762Slc
	var yyhl762 bool = l >= 0
	for yyj762 := 0; ; yyj762++ {
		if yyhl762 {
			if yyj762 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys762Slc = r.DecodeBytes(yys762Slc, true, true)
		yys762 := string(yys762Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys762 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int)
				}
				yym764 := z.DecBinary()
				_ = yym764
				if false {
				} else {
					*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int)
				}
				yym766 := z.DecBinary()
				_ = yym766
				if false {
				} else {
					*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym768 := z.DecBinary()
				_ = yym768
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv770 := &x.Template
				yym771 := z.DecBinary()
				_ = yym771
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv770) {
				} else {
					z.DecFallback(yyv770, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys762)
		} // end switch yys762
	} // end for yyj762
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj772 int
	var yyb772 bool
	var yyhl772 bool = l >= 0
	yyj772++
	if yyhl772 {
		yyb772 = yyj772 > l
	} else {
		yyb772 = r.CheckBreak()
	}
	if yyb772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int)
		}
		yym774 := z.DecBinary()
		_ = yym774
		if false {
		} else {
			*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj772++
	if yyhl772 {
		yyb772 = yyj772 > l
	} else {
		yyb772 = r.CheckBreak()
	}
	if yyb772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int)
		}
		yym776 := z.DecBinary()
		_ = yym776
		if false {
		} else {
			*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj772++
	if yyhl772 {
		yyb772 = yyj772 > l
	} else {
		yyb772 = r.CheckBreak()
	}
	if yyb772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym778 := z.DecBinary()
		_ = yym778
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj772++
	if yyhl772 {
		yyb772 = yyj772 > l
	} else {
		yyb772 = r.CheckBreak()
	}
	if yyb772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj772++
	if yyhl772 {
		yyb772 = yyj772 > l
	} else {
		yyb772 = r.CheckBreak()
	}
	if yyb772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv780 := &x.Template
		yym781 := z.DecBinary()
		_ = yym781
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv780) {
		} else {
			z.DecFallback(yyv780, false)
		}
	}
	for {
		yyj772++
		if yyhl772 {
			yyb772 = yyj772 > l
		} else {
			yyb772 = r.CheckBreak()
		}
		if yyb772 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj772-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym782 := z.EncBinary()
		_ = yym782
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep783 := !z.EncBinary()
			yy2arr783 := z.EncBasicHandle().StructToArray
			var yyq783 [6]bool
			_, _, _ = yysep783, yyq783, yy2arr783
			const yyr783 bool = false
			yyq783[0] = len(x.Conditions) != 0
			yyq783[1] = x.StartTime != nil
			yyq783[2] = x.CompletionTime != nil
			yyq783[3] = x.Active != 0
			yyq783[4] = x.Succeeded != 0
			yyq783[5] = x.Failed != 0
			var yynn783 int
			if yyr783 || yy2arr783 {
				r.EncodeArrayStart(6)
			} else {
				yynn783 = 0
				for _, b := range yyq783 {
					if b {
						yynn783++
					}
				}
				r.EncodeMapStart(yynn783)
				yynn783 = 0
			}
			if yyr783 || yy2arr783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq783[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym785 := z.EncBinary()
						_ = yym785
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq783[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym786 := z.EncBinary()
						_ = yym786
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr783 || yy2arr783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq783[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym788 := z.EncBinary()
						_ = yym788
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym788 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym788 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq783[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym789 := z.EncBinary()
						_ = yym789
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym789 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym789 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr783 || yy2arr783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq783[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym791 := z.EncBinary()
						_ = yym791
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym791 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym791 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq783[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym792 := z.EncBinary()
						_ = yym792
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym792 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym792 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr783 || yy2arr783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq783[3] {
					yym794 := z.EncBinary()
					_ = yym794
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq783[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym795 := z.EncBinary()
					_ = yym795
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr783 || yy2arr783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq783[4] {
					yym797 := z.EncBinary()
					_ = yym797
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq783[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr783 || yy2arr783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq783[5] {
					yym800 := z.EncBinary()
					_ = yym800
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq783[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym801 := z.EncBinary()
					_ = yym801
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yyr783 || yy2arr783 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym802 := z.DecBinary()
	_ = yym802
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct803 := r.ContainerType()
		if yyct803 == codecSelferValueTypeMap1234 {
			yyl803 := r.ReadMapStart()
			if yyl803 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl803, d)
			}
		} else if yyct803 == codecSelferValueTypeArray1234 {
			yyl803 := r.ReadArrayStart()
			if yyl803 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl803, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys804Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys804Slc
	var yyhl804 bool = l >= 0
	for yyj804 := 0; ; yyj804++ {
		if yyhl804 {
			if yyj804 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys804Slc = r.DecodeBytes(yys804Slc, true, true)
		yys804 := string(yys804Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys804 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv805 := &x.Conditions
				yym806 := z.DecBinary()
				_ = yym806
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv805), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym808 := z.DecBinary()
				_ = yym808
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym808 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym808 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym810 := z.DecBinary()
				_ = yym810
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym810 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym810 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys804)
		} // end switch yys804
	} // end for yyj804
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj814 int
	var yyb814 bool
	var yyhl814 bool = l >= 0
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv815 := &x.Conditions
		yym816 := z.DecBinary()
		_ = yym816
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv815), d)
		}
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym818 := z.DecBinary()
		_ = yym818
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym818 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym818 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym820 := z.DecBinary()
		_ = yym820
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym820 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym820 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj814++
		if yyhl814 {
			yyb814 = yyj814 > l
		} else {
			yyb814 = r.CheckBreak()
		}
		if yyb814 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj814-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym824 := z.EncBinary()
	_ = yym824
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym825 := z.DecBinary()
	_ = yym825
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym826 := z.EncBinary()
		_ = yym826
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep827 := !z.EncBinary()
			yy2arr827 := z.EncBasicHandle().StructToArray
			var yyq827 [6]bool
			_, _, _ = yysep827, yyq827, yy2arr827
			const yyr827 bool = false
			yyq827[2] = true
			yyq827[3] = true
			yyq827[4] = x.Reason != ""
			yyq827[5] = x.Message != ""
			var yynn827 int
			if yyr827 || yy2arr827 {
				r.EncodeArrayStart(6)
			} else {
				yynn827 = 2
				for _, b := range yyq827 {
					if b {
						yynn827++
					}
				}
				r.EncodeMapStart(yynn827)
				yynn827 = 0
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym830 := z.EncBinary()
				_ = yym830
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym831 := z.EncBinary()
				_ = yym831
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq827[2] {
					yy833 := &x.LastProbeTime
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else if z.HasExtensions() && z.EncExt(yy833) {
					} else if yym834 {
						z.EncBinaryMarshal(yy833)
					} else if !yym834 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy833)
					} else {
						z.EncFallback(yy833)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq827[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy835 := &x.LastProbeTime
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else if z.HasExtensions() && z.EncExt(yy835) {
					} else if yym836 {
						z.EncBinaryMarshal(yy835)
					} else if !yym836 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy835)
					} else {
						z.EncFallback(yy835)
					}
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq827[3] {
					yy838 := &x.LastTransitionTime
					yym839 := z.EncBinary()
					_ = yym839
					if false {
					} else if z.HasExtensions() && z.EncExt(yy838) {
					} else if yym839 {
						z.EncBinaryMarshal(yy838)
					} else if !yym839 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy838)
					} else {
						z.EncFallback(yy838)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq827[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy840 := &x.LastTransitionTime
					yym841 := z.EncBinary()
					_ = yym841
					if false {
					} else if z.HasExtensions() && z.EncExt(yy840) {
					} else if yym841 {
						z.EncBinaryMarshal(yy840)
					} else if !yym841 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy840)
					} else {
						z.EncFallback(yy840)
					}
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq827[4] {
					yym843 := z.EncBinary()
					_ = yym843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq827[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym844 := z.EncBinary()
					_ = yym844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq827[5] {
					yym846 := z.EncBinary()
					_ = yym846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq827[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym847 := z.EncBinary()
					_ = yym847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym848 := z.DecBinary()
	_ = yym848
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct849 := r.ContainerType()
		if yyct849 == codecSelferValueTypeMap1234 {
			yyl849 := r.ReadMapStart()
			if yyl849 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl849, d)
			}
		} else if yyct849 == codecSelferValueTypeArray1234 {
			yyl849 := r.ReadArrayStart()
			if yyl849 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl849, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys850Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys850Slc
	var yyhl850 bool = l >= 0
	for yyj850 := 0; ; yyj850++ {
		if yyhl850 {
			if yyj850 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys850Slc = r.DecodeBytes(yys850Slc, true, true)
		yys850 := string(yys850Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys850 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv853 := &x.LastProbeTime
				yym854 := z.DecBinary()
				_ = yym854
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv853) {
				} else if yym854 {
					z.DecBinaryUnmarshal(yyv853)
				} else if !yym854 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv853)
				} else {
					z.DecFallback(yyv853, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv855 := &x.LastTransitionTime
				yym856 := z.DecBinary()
				_ = yym856
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv855) {
				} else if yym856 {
					z.DecBinaryUnmarshal(yyv855)
				} else if !yym856 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv855)
				} else {
					z.DecFallback(yyv855, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys850)
		} // end switch yys850
	} // end for yyj850
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj859 int
	var yyb859 bool
	var yyhl859 bool = l >= 0
	yyj859++
	if yyhl859 {
		yyb859 = yyj859 > l
	} else {
		yyb859 = r.CheckBreak()
	}
	if yyb859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj859++
	if yyhl859 {
		yyb859 = yyj859 > l
	} else {
		yyb859 = r.CheckBreak()
	}
	if yyb859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj859++
	if yyhl859 {
		yyb859 = yyj859 > l
	} else {
		yyb859 = r.CheckBreak()
	}
	if yyb859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv862 := &x.LastProbeTime
		yym863 := z.DecBinary()
		_ = yym863
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv862) {
		} else if yym863 {
			z.DecBinaryUnmarshal(yyv862)
		} else if !yym863 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv862)
		} else {
			z.DecFallback(yyv862, false)
		}
	}
	yyj859++
	if yyhl859 {
		yyb859 = yyj859 > l
	} else {
		yyb859 = r.CheckBreak()
	}
	if yyb859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv864 := &x.LastTransitionTime
		yym865 := z.DecBinary()
		_ = yym865
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv864) {
		} else if yym865 {
			z.DecBinaryUnmarshal(yyv864)
		} else if !yym865 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv864)
		} else {
			z.DecFallback(yyv864, false)
		}
	}
	yyj859++
	if yyhl859 {
		yyb859 = yyj859 > l
	} else {
		yyb859 = r.CheckBreak()
	}
	if yyb859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj859++
	if yyhl859 {
		yyb859 = yyj859 > l
	} else {
		yyb859 = r.CheckBreak()
	}
	if yyb859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj859++
		if yyhl859 {
			yyb859 = yyj859 > l
		} else {
			yyb859 = r.CheckBreak()
		}
		if yyb859 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj859-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym868 := z.EncBinary()
		_ = yym868
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep869 := !z.EncBinary()
			yy2arr869 := z.EncBasicHandle().StructToArray
			var yyq869 [5]bool
			_, _, _ = yysep869, yyq869, yy2arr869
			const yyr869 bool = false
			yyq869[0] = x.Kind != ""
			yyq869[1] = x.APIVersion != ""
			yyq869[2] = true
			yyq869[3] = true
			yyq869[4] = true
			var yynn869 int
			if yyr869 || yy2arr869 {
				r.EncodeArrayStart(5)
			} else {
				yynn869 = 0
				for _, b := range yyq869 {
					if b {
						yynn869++
					}
				}
				r.EncodeMapStart(yynn869)
				yynn869 = 0
			}
			if yyr869 || yy2arr869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq869[0] {
					yym871 := z.EncBinary()
					_ = yym871
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq869[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym872 := z.EncBinary()
					_ = yym872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr869 || yy2arr869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq869[1] {
					yym874 := z.EncBinary()
					_ = yym874
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq869[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym875 := z.EncBinary()
					_ = yym875
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr869 || yy2arr869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq869[2] {
					yy877 := &x.ObjectMeta
					yym878 := z.EncBinary()
					_ = yym878
					if false {
					} else if z.HasExtensions() && z.EncExt(yy877) {
					} else {
						z.EncFallback(yy877)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq869[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy879 := &x.ObjectMeta
					yym880 := z.EncBinary()
					_ = yym880
					if false {
					} else if z.HasExtensions() && z.EncExt(yy879) {
					} else {
						z.EncFallback(yy879)
					}
				}
			}
			if yyr869 || yy2arr869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq869[3] {
					yy882 := &x.Spec
					yy882.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq869[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy883 := &x.Spec
					yy883.CodecEncodeSelf(e)
				}
			}
			if yyr869 || yy2arr869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq869[4] {
					yy885 := &x.Status
					yy885.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq869[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy886 := &x.Status
					yy886.CodecEncodeSelf(e)
				}
			}
			if yyr869 || yy2arr869 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym887 := z.DecBinary()
	_ = yym887
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct888 := r.ContainerType()
		if yyct888 == codecSelferValueTypeMap1234 {
			yyl888 := r.ReadMapStart()
			if yyl888 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl888, d)
			}
		} else if yyct888 == codecSelferValueTypeArray1234 {
			yyl888 := r.ReadArrayStart()
			if yyl888 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl888, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys889Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys889Slc
	var yyhl889 bool = l >= 0
	for yyj889 := 0; ; yyj889++ {
		if yyhl889 {
			if yyj889 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys889Slc = r.DecodeBytes(yys889Slc, true, true)
		yys889 := string(yys889Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys889 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv892 := &x.ObjectMeta
				yym893 := z.DecBinary()
				_ = yym893
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv892) {
				} else {
					z.DecFallback(yyv892, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv894 := &x.Spec
				yyv894.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv895 := &x.Status
				yyv895.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys889)
		} // end switch yys889
	} // end for yyj889
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj896 int
	var yyb896 bool
	var yyhl896 bool = l >= 0
	yyj896++
	if yyhl896 {
		yyb896 = yyj896 > l
	} else {
		yyb896 = r.CheckBreak()
	}
	if yyb896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj896++
	if yyhl896 {
		yyb896 = yyj896 > l
	} else {
		yyb896 = r.CheckBreak()
	}
	if yyb896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj896++
	if yyhl896 {
		yyb896 = yyj896 > l
	} else {
		yyb896 = r.CheckBreak()
	}
	if yyb896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv899 := &x.ObjectMeta
		yym900 := z.DecBinary()
		_ = yym900
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv899) {
		} else {
			z.DecFallback(yyv899, false)
		}
	}
	yyj896++
	if yyhl896 {
		yyb896 = yyj896 > l
	} else {
		yyb896 = r.CheckBreak()
	}
	if yyb896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv901 := &x.Spec
		yyv901.CodecDecodeSelf(d)
	}
	yyj896++
	if yyhl896 {
		yyb896 = yyj896 > l
	} else {
		yyb896 = r.CheckBreak()
	}
	if yyb896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv902 := &x.Status
		yyv902.CodecDecodeSelf(d)
	}
	for {
		yyj896++
		if yyhl896 {
			yyb896 = yyj896 > l
		} else {
			yyb896 = r.CheckBreak()
		}
		if yyb896 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj896-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym903 := z.EncBinary()
		_ = yym903
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep904 := !z.EncBinary()
			yy2arr904 := z.EncBasicHandle().StructToArray
			var yyq904 [4]bool
			_, _, _ = yysep904, yyq904, yy2arr904
			const yyr904 bool = false
			yyq904[0] = x.Kind != ""
			yyq904[1] = x.APIVersion != ""
			yyq904[2] = true
			var yynn904 int
			if yyr904 || yy2arr904 {
				r.EncodeArrayStart(4)
			} else {
				yynn904 = 1
				for _, b := range yyq904 {
					if b {
						yynn904++
					}
				}
				r.EncodeMapStart(yynn904)
				yynn904 = 0
			}
			if yyr904 || yy2arr904 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq904[0] {
					yym906 := z.EncBinary()
					_ = yym906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq904[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym907 := z.EncBinary()
					_ = yym907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr904 || yy2arr904 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq904[1] {
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq904[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym910 := z.EncBinary()
					_ = yym910
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr904 || yy2arr904 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq904[2] {
					yy912 := &x.ListMeta
					yym913 := z.EncBinary()
					_ = yym913
					if false {
					} else if z.HasExtensions() && z.EncExt(yy912) {
					} else {
						z.EncFallback(yy912)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq904[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy914 := &x.ListMeta
					yym915 := z.EncBinary()
					_ = yym915
					if false {
					} else if z.HasExtensions() && z.EncExt(yy914) {
					} else {
						z.EncFallback(yy914)
					}
				}
			}
			if yyr904 || yy2arr904 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym917 := z.EncBinary()
					_ = yym917
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym918 := z.EncBinary()
					_ = yym918
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yyr904 || yy2arr904 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym919 := z.DecBinary()
	_ = yym919
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct920 := r.ContainerType()
		if yyct920 == codecSelferValueTypeMap1234 {
			yyl920 := r.ReadMapStart()
			if yyl920 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl920, d)
			}
		} else if yyct920 == codecSelferValueTypeArray1234 {
			yyl920 := r.ReadArrayStart()
			if yyl920 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl920, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys921Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys921Slc
	var yyhl921 bool = l >= 0
	for yyj921 := 0; ; yyj921++ {
		if yyhl921 {
			if yyj921 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys921Slc = r.DecodeBytes(yys921Slc, true, true)
		yys921 := string(yys921Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys921 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv924 := &x.ListMeta
				yym925 := z.DecBinary()
				_ = yym925
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv924) {
				} else {
					z.DecFallback(yyv924, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv926 := &x.Items
				yym927 := z.DecBinary()
				_ = yym927
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv926), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys921)
		} // end switch yys921
	} // end for yyj921
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj928 int
	var yyb928 bool
	var yyhl928 bool = l >= 0
	yyj928++
	if yyhl928 {
		yyb928 = yyj928 > l
	} else {
		yyb928 = r.CheckBreak()
	}
	if yyb928 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj928++
	if yyhl928 {
		yyb928 = yyj928 > l
	} else {
		yyb928 = r.CheckBreak()
	}
	if yyb928 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj928++
	if yyhl928 {
		yyb928 = yyj928 > l
	} else {
		yyb928 = r.CheckBreak()
	}
	if yyb928 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv931 := &x.ListMeta
		yym932 := z.DecBinary()
		_ = yym932
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv931) {
		} else {
			z.DecFallback(yyv931, false)
		}
	}
	yyj928++
	if yyhl928 {
		yyb928 = yyj928 > l
	} else {
		yyb928 = r.CheckBreak()
	}
	if yyb928 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv933 := &x.Items
		yym934 := z.DecBinary()
		_ = yym934
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv933), d)
		}
	}
	for {
		yyj928++
		if yyhl928 {
			yyb928 = yyj928 > l
		} else {
			yyb928 = r.CheckBreak()
		}
		if yyb928 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj928-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym935 := z.EncBinary()
		_ = yym935
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep936 := !z.EncBinary()
			yy2arr936 := z.EncBasicHandle().StructToArray
			var yyq936 [2]bool
			_, _, _ = yysep936, yyq936, yy2arr936
			const yyr936 bool = false
			yyq936[0] = x.Backend != nil
			yyq936[1] = len(x.Rules) != 0
			var yynn936 int
			if yyr936 || yy2arr936 {
				r.EncodeArrayStart(2)
			} else {
				yynn936 = 0
				for _, b := range yyq936 {
					if b {
						yynn936++
					}
				}
				r.EncodeMapStart(yynn936)
				yynn936 = 0
			}
			if yyr936 || yy2arr936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq936[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq936[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr936 || yy2arr936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq936[1] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym939 := z.EncBinary()
						_ = yym939
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq936[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym940 := z.EncBinary()
						_ = yym940
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yyr936 || yy2arr936 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym941 := z.DecBinary()
	_ = yym941
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct942 := r.ContainerType()
		if yyct942 == codecSelferValueTypeMap1234 {
			yyl942 := r.ReadMapStart()
			if yyl942 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl942, d)
			}
		} else if yyct942 == codecSelferValueTypeArray1234 {
			yyl942 := r.ReadArrayStart()
			if yyl942 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl942, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys943Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys943Slc
	var yyhl943 bool = l >= 0
	for yyj943 := 0; ; yyj943++ {
		if yyhl943 {
			if yyj943 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys943Slc = r.DecodeBytes(yys943Slc, true, true)
		yys943 := string(yys943Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys943 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv945 := &x.Rules
				yym946 := z.DecBinary()
				_ = yym946
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv945), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys943)
		} // end switch yys943
	} // end for yyj943
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj947 int
	var yyb947 bool
	var yyhl947 bool = l >= 0
	yyj947++
	if yyhl947 {
		yyb947 = yyj947 > l
	} else {
		yyb947 = r.CheckBreak()
	}
	if yyb947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj947++
	if yyhl947 {
		yyb947 = yyj947 > l
	} else {
		yyb947 = r.CheckBreak()
	}
	if yyb947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv949 := &x.Rules
		yym950 := z.DecBinary()
		_ = yym950
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv949), d)
		}
	}
	for {
		yyj947++
		if yyhl947 {
			yyb947 = yyj947 > l
		} else {
			yyb947 = r.CheckBreak()
		}
		if yyb947 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj947-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym951 := z.EncBinary()
		_ = yym951
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep952 := !z.EncBinary()
			yy2arr952 := z.EncBasicHandle().StructToArray
			var yyq952 [1]bool
			_, _, _ = yysep952, yyq952, yy2arr952
			const yyr952 bool = false
			yyq952[0] = true
			var yynn952 int
			if yyr952 || yy2arr952 {
				r.EncodeArrayStart(1)
			} else {
				yynn952 = 0
				for _, b := range yyq952 {
					if b {
						yynn952++
					}
				}
				r.EncodeMapStart(yynn952)
				yynn952 = 0
			}
			if yyr952 || yy2arr952 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq952[0] {
					yy954 := &x.LoadBalancer
					yym955 := z.EncBinary()
					_ = yym955
					if false {
					} else if z.HasExtensions() && z.EncExt(yy954) {
					} else {
						z.EncFallback(yy954)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq952[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy956 := &x.LoadBalancer
					yym957 := z.EncBinary()
					_ = yym957
					if false {
					} else if z.HasExtensions() && z.EncExt(yy956) {
					} else {
						z.EncFallback(yy956)
					}
				}
			}
			if yyr952 || yy2arr952 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym958 := z.DecBinary()
	_ = yym958
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct959 := r.ContainerType()
		if yyct959 == codecSelferValueTypeMap1234 {
			yyl959 := r.ReadMapStart()
			if yyl959 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl959, d)
			}
		} else if yyct959 == codecSelferValueTypeArray1234 {
			yyl959 := r.ReadArrayStart()
			if yyl959 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl959, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys960Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys960Slc
	var yyhl960 bool = l >= 0
	for yyj960 := 0; ; yyj960++ {
		if yyhl960 {
			if yyj960 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys960Slc = r.DecodeBytes(yys960Slc, true, true)
		yys960 := string(yys960Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys960 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
			} else {
				yyv961 := &x.LoadBalancer
				yym962 := z.DecBinary()
				_ = yym962
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv961) {
				} else {
					z.DecFallback(yyv961, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys960)
		} // end switch yys960
	} // end for yyj960
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj963 int
	var yyb963 bool
	var yyhl963 bool = l >= 0
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
	} else {
		yyv964 := &x.LoadBalancer
		yym965 := z.DecBinary()
		_ = yym965
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv964) {
		} else {
			z.DecFallback(yyv964, false)
		}
	}
	for {
		yyj963++
		if yyhl963 {
			yyb963 = yyj963 > l
		} else {
			yyb963 = r.CheckBreak()
		}
		if yyb963 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj963-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym966 := z.EncBinary()
		_ = yym966
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep967 := !z.EncBinary()
			yy2arr967 := z.EncBasicHandle().StructToArray
			var yyq967 [2]bool
			_, _, _ = yysep967, yyq967, yy2arr967
			const yyr967 bool = false
			yyq967[0] = x.Host != ""
			yyq967[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			var yynn967 int
			if yyr967 || yy2arr967 {
				r.EncodeArrayStart(2)
			} else {
				yynn967 = 0
				for _, b := range yyq967 {
					if b {
						yynn967++
					}
				}
				r.EncodeMapStart(yynn967)
				yynn967 = 0
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq967[0] {
					yym969 := z.EncBinary()
					_ = yym969
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq967[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym970 := z.EncBinary()
					_ = yym970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn971 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn971 = true
				goto LABEL971
			}
		LABEL971:
			if yyr967 || yy2arr967 {
				if yyn971 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq967[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq967[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn971 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym972 := z.DecBinary()
	_ = yym972
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct973 := r.ContainerType()
		if yyct973 == codecSelferValueTypeMap1234 {
			yyl973 := r.ReadMapStart()
			if yyl973 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl973, d)
			}
		} else if yyct973 == codecSelferValueTypeArray1234 {
			yyl973 := r.ReadArrayStart()
			if yyl973 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl973, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys974Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys974Slc
	var yyhl974 bool = l >= 0
	for yyj974 := 0; ; yyj974++ {
		if yyhl974 {
			if yyj974 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys974Slc = r.DecodeBytes(yys974Slc, true, true)
		yys974 := string(yys974Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys974 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys974)
		} // end switch yys974
	} // end for yyj974
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj977 int
	var yyb977 bool
	var yyhl977 bool = l >= 0
	yyj977++
	if yyhl977 {
		yyb977 = yyj977 > l
	} else {
		yyb977 = r.CheckBreak()
	}
	if yyb977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	if x.IngressRuleValue.HTTP == nil {
		x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
	}
	yyj977++
	if yyhl977 {
		yyb977 = yyj977 > l
	} else {
		yyb977 = r.CheckBreak()
	}
	if yyb977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj977++
		if yyhl977 {
			yyb977 = yyj977 > l
		} else {
			yyb977 = r.CheckBreak()
		}
		if yyb977 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj977-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym980 := z.EncBinary()
		_ = yym980
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep981 := !z.EncBinary()
			yy2arr981 := z.EncBasicHandle().StructToArray
			var yyq981 [1]bool
			_, _, _ = yysep981, yyq981, yy2arr981
			const yyr981 bool = false
			yyq981[0] = x.HTTP != nil
			var yynn981 int
			if yyr981 || yy2arr981 {
				r.EncodeArrayStart(1)
			} else {
				yynn981 = 0
				for _, b := range yyq981 {
					if b {
						yynn981++
					}
				}
				r.EncodeMapStart(yynn981)
				yynn981 = 0
			}
			if yyr981 || yy2arr981 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq981[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq981[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yyr981 || yy2arr981 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym983 := z.DecBinary()
	_ = yym983
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct984 := r.ContainerType()
		if yyct984 == codecSelferValueTypeMap1234 {
			yyl984 := r.ReadMapStart()
			if yyl984 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl984, d)
			}
		} else if yyct984 == codecSelferValueTypeArray1234 {
			yyl984 := r.ReadArrayStart()
			if yyl984 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl984, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys985Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys985Slc
	var yyhl985 bool = l >= 0
	for yyj985 := 0; ; yyj985++ {
		if yyhl985 {
			if yyj985 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys985Slc = r.DecodeBytes(yys985Slc, true, true)
		yys985 := string(yys985Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys985 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys985)
		} // end switch yys985
	} // end for yyj985
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj987 int
	var yyb987 bool
	var yyhl987 bool = l >= 0
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj987++
		if yyhl987 {
			yyb987 = yyj987 > l
		} else {
			yyb987 = r.CheckBreak()
		}
		if yyb987 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj987-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym989 := z.EncBinary()
		_ = yym989
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep990 := !z.EncBinary()
			yy2arr990 := z.EncBasicHandle().StructToArray
			var yyq990 [1]bool
			_, _, _ = yysep990, yyq990, yy2arr990
			const yyr990 bool = false
			var yynn990 int
			if yyr990 || yy2arr990 {
				r.EncodeArrayStart(1)
			} else {
				yynn990 = 1
				for _, b := range yyq990 {
					if b {
						yynn990++
					}
				}
				r.EncodeMapStart(yynn990)
				yynn990 = 0
			}
			if yyr990 || yy2arr990 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym992 := z.EncBinary()
					_ = yym992
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym993 := z.EncBinary()
					_ = yym993
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yyr990 || yy2arr990 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym994 := z.DecBinary()
	_ = yym994
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct995 := r.ContainerType()
		if yyct995 == codecSelferValueTypeMap1234 {
			yyl995 := r.ReadMapStart()
			if yyl995 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl995, d)
			}
		} else if yyct995 == codecSelferValueTypeArray1234 {
			yyl995 := r.ReadArrayStart()
			if yyl995 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl995, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys996Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys996Slc
	var yyhl996 bool = l >= 0
	for yyj996 := 0; ; yyj996++ {
		if yyhl996 {
			if yyj996 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys996Slc = r.DecodeBytes(yys996Slc, true, true)
		yys996 := string(yys996Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys996 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv997 := &x.Paths
				yym998 := z.DecBinary()
				_ = yym998
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv997), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys996)
		} // end switch yys996
	} // end for yyj996
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj999 int
	var yyb999 bool
	var yyhl999 bool = l >= 0
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv1000 := &x.Paths
		yym1001 := z.DecBinary()
		_ = yym1001
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1000), d)
		}
	}
	for {
		yyj999++
		if yyhl999 {
			yyb999 = yyj999 > l
		} else {
			yyb999 = r.CheckBreak()
		}
		if yyb999 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj999-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1002 := z.EncBinary()
		_ = yym1002
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1003 := !z.EncBinary()
			yy2arr1003 := z.EncBasicHandle().StructToArray
			var yyq1003 [2]bool
			_, _, _ = yysep1003, yyq1003, yy2arr1003
			const yyr1003 bool = false
			yyq1003[0] = x.Path != ""
			var yynn1003 int
			if yyr1003 || yy2arr1003 {
				r.EncodeArrayStart(2)
			} else {
				yynn1003 = 1
				for _, b := range yyq1003 {
					if b {
						yynn1003++
					}
				}
				r.EncodeMapStart(yynn1003)
				yynn1003 = 0
			}
			if yyr1003 || yy2arr1003 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1003[0] {
					yym1005 := z.EncBinary()
					_ = yym1005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1003[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1006 := z.EncBinary()
					_ = yym1006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1003 || yy2arr1003 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1008 := &x.Backend
				yy1008.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1009 := &x.Backend
				yy1009.CodecEncodeSelf(e)
			}
			if yyr1003 || yy2arr1003 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1010 := z.DecBinary()
	_ = yym1010
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1011 := r.ContainerType()
		if yyct1011 == codecSelferValueTypeMap1234 {
			yyl1011 := r.ReadMapStart()
			if yyl1011 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1011, d)
			}
		} else if yyct1011 == codecSelferValueTypeArray1234 {
			yyl1011 := r.ReadArrayStart()
			if yyl1011 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1011, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1012Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1012Slc
	var yyhl1012 bool = l >= 0
	for yyj1012 := 0; ; yyj1012++ {
		if yyhl1012 {
			if yyj1012 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1012Slc = r.DecodeBytes(yys1012Slc, true, true)
		yys1012 := string(yys1012Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1012 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1014 := &x.Backend
				yyv1014.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1012)
		} // end switch yys1012
	} // end for yyj1012
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1015 int
	var yyb1015 bool
	var yyhl1015 bool = l >= 0
	yyj1015++
	if yyhl1015 {
		yyb1015 = yyj1015 > l
	} else {
		yyb1015 = r.CheckBreak()
	}
	if yyb1015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1015++
	if yyhl1015 {
		yyb1015 = yyj1015 > l
	} else {
		yyb1015 = r.CheckBreak()
	}
	if yyb1015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1017 := &x.Backend
		yyv1017.CodecDecodeSelf(d)
	}
	for {
		yyj1015++
		if yyhl1015 {
			yyb1015 = yyj1015 > l
		} else {
			yyb1015 = r.CheckBreak()
		}
		if yyb1015 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1015-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1018 := z.EncBinary()
		_ = yym1018
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1019 := !z.EncBinary()
			yy2arr1019 := z.EncBasicHandle().StructToArray
			var yyq1019 [2]bool
			_, _, _ = yysep1019, yyq1019, yy2arr1019
			const yyr1019 bool = false
			var yynn1019 int
			if yyr1019 || yy2arr1019 {
				r.EncodeArrayStart(2)
			} else {
				yynn1019 = 2
				for _, b := range yyq1019 {
					if b {
						yynn1019++
					}
				}
				r.EncodeMapStart(yynn1019)
				yynn1019 = 0
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1021 := z.EncBinary()
				_ = yym1021
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1022 := z.EncBinary()
				_ = yym1022
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1024 := &x.ServicePort
				yym1025 := z.EncBinary()
				_ = yym1025
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1024) {
				} else if !yym1025 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1024)
				} else {
					z.EncFallback(yy1024)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1026 := &x.ServicePort
				yym1027 := z.EncBinary()
				_ = yym1027
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1026) {
				} else if !yym1027 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1026)
				} else {
					z.EncFallback(yy1026)
				}
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1028 := z.DecBinary()
	_ = yym1028
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1029 := r.ContainerType()
		if yyct1029 == codecSelferValueTypeMap1234 {
			yyl1029 := r.ReadMapStart()
			if yyl1029 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1029, d)
			}
		} else if yyct1029 == codecSelferValueTypeArray1234 {
			yyl1029 := r.ReadArrayStart()
			if yyl1029 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1029, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1030Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1030Slc
	var yyhl1030 bool = l >= 0
	for yyj1030 := 0; ; yyj1030++ {
		if yyhl1030 {
			if yyj1030 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1030Slc = r.DecodeBytes(yys1030Slc, true, true)
		yys1030 := string(yys1030Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1030 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg6_intstr.IntOrString{}
			} else {
				yyv1032 := &x.ServicePort
				yym1033 := z.DecBinary()
				_ = yym1033
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1032) {
				} else if !yym1033 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1032)
				} else {
					z.DecFallback(yyv1032, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1030)
		} // end switch yys1030
	} // end for yyj1030
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1034 int
	var yyb1034 bool
	var yyhl1034 bool = l >= 0
	yyj1034++
	if yyhl1034 {
		yyb1034 = yyj1034 > l
	} else {
		yyb1034 = r.CheckBreak()
	}
	if yyb1034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1034++
	if yyhl1034 {
		yyb1034 = yyj1034 > l
	} else {
		yyb1034 = r.CheckBreak()
	}
	if yyb1034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg6_intstr.IntOrString{}
	} else {
		yyv1036 := &x.ServicePort
		yym1037 := z.DecBinary()
		_ = yym1037
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1036) {
		} else if !yym1037 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1036)
		} else {
			z.DecFallback(yyv1036, false)
		}
	}
	for {
		yyj1034++
		if yyhl1034 {
			yyb1034 = yyj1034 > l
		} else {
			yyb1034 = r.CheckBreak()
		}
		if yyb1034 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1034-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1038 := z.EncBinary()
	_ = yym1038
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1039 := z.DecBinary()
	_ = yym1039
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1040 := z.EncBinary()
		_ = yym1040
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1041 := !z.EncBinary()
			yy2arr1041 := z.EncBasicHandle().StructToArray
			var yyq1041 [2]bool
			_, _, _ = yysep1041, yyq1041, yy2arr1041
			const yyr1041 bool = false
			var yynn1041 int
			if yyr1041 || yy2arr1041 {
				r.EncodeArrayStart(2)
			} else {
				yynn1041 = 2
				for _, b := range yyq1041 {
					if b {
						yynn1041++
					}
				}
				r.EncodeMapStart(yynn1041)
				yynn1041 = 0
			}
			if yyr1041 || yy2arr1041 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Resource.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Resource.CodecEncodeSelf(e)
			}
			if yyr1041 || yy2arr1041 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1044 := z.EncBinary()
				_ = yym1044
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1045 := z.EncBinary()
				_ = yym1045
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yyr1041 || yy2arr1041 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1046 := z.DecBinary()
	_ = yym1046
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1047 := r.ContainerType()
		if yyct1047 == codecSelferValueTypeMap1234 {
			yyl1047 := r.ReadMapStart()
			if yyl1047 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1047, d)
			}
		} else if yyct1047 == codecSelferValueTypeArray1234 {
			yyl1047 := r.ReadArrayStart()
			if yyl1047 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1047, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1048Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1048Slc
	var yyhl1048 bool = l >= 0
	for yyj1048 := 0; ; yyj1048++ {
		if yyhl1048 {
			if yyj1048 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1048Slc = r.DecodeBytes(yys1048Slc, true, true)
		yys1048 := string(yys1048Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1048 {
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = NodeResource(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				x.Value = float64(r.DecodeFloat(false))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1048)
		} // end switch yys1048
	} // end for yyj1048
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1051 int
	var yyb1051 bool
	var yyhl1051 bool = l >= 0
	yyj1051++
	if yyhl1051 {
		yyb1051 = yyj1051 > l
	} else {
		yyb1051 = r.CheckBreak()
	}
	if yyb1051 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = NodeResource(r.DecodeString())
	}
	yyj1051++
	if yyhl1051 {
		yyb1051 = yyj1051 > l
	} else {
		yyb1051 = r.CheckBreak()
	}
	if yyb1051 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		x.Value = float64(r.DecodeFloat(false))
	}
	for {
		yyj1051++
		if yyhl1051 {
			yyb1051 = yyj1051 > l
		} else {
			yyb1051 = r.CheckBreak()
		}
		if yyb1051 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1051-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1054 := z.EncBinary()
		_ = yym1054
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1055 := !z.EncBinary()
			yy2arr1055 := z.EncBasicHandle().StructToArray
			var yyq1055 [3]bool
			_, _, _ = yysep1055, yyq1055, yy2arr1055
			const yyr1055 bool = false
			var yynn1055 int
			if yyr1055 || yy2arr1055 {
				r.EncodeArrayStart(3)
			} else {
				yynn1055 = 3
				for _, b := range yyq1055 {
					if b {
						yynn1055++
					}
				}
				r.EncodeMapStart(yynn1055)
				yynn1055 = 0
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1057 := z.EncBinary()
				_ = yym1057
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("minNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1058 := z.EncBinary()
				_ = yym1058
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1060 := z.EncBinary()
				_ = yym1060
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1061 := z.EncBinary()
				_ = yym1061
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1063 := z.EncBinary()
					_ = yym1063
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1064 := z.EncBinary()
					_ = yym1064
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1065 := z.DecBinary()
	_ = yym1065
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1066 := r.ContainerType()
		if yyct1066 == codecSelferValueTypeMap1234 {
			yyl1066 := r.ReadMapStart()
			if yyl1066 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1066, d)
			}
		} else if yyct1066 == codecSelferValueTypeArray1234 {
			yyl1066 := r.ReadArrayStart()
			if yyl1066 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1066, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1067Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1067Slc
	var yyhl1067 bool = l >= 0
	for yyj1067 := 0; ; yyj1067++ {
		if yyhl1067 {
			if yyj1067 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1067Slc = r.DecodeBytes(yys1067Slc, true, true)
		yys1067 := string(yys1067Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1067 {
		case "minNodes":
			if r.TryDecodeAsNil() {
				x.MinNodes = 0
			} else {
				x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "maxNodes":
			if r.TryDecodeAsNil() {
				x.MaxNodes = 0
			} else {
				x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.TargetUtilization = nil
			} else {
				yyv1070 := &x.TargetUtilization
				yym1071 := z.DecBinary()
				_ = yym1071
				if false {
				} else {
					h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1070), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1067)
		} // end switch yys1067
	} // end for yyj1067
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1072 int
	var yyb1072 bool
	var yyhl1072 bool = l >= 0
	yyj1072++
	if yyhl1072 {
		yyb1072 = yyj1072 > l
	} else {
		yyb1072 = r.CheckBreak()
	}
	if yyb1072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinNodes = 0
	} else {
		x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1072++
	if yyhl1072 {
		yyb1072 = yyj1072 > l
	} else {
		yyb1072 = r.CheckBreak()
	}
	if yyb1072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxNodes = 0
	} else {
		x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1072++
	if yyhl1072 {
		yyb1072 = yyj1072 > l
	} else {
		yyb1072 = r.CheckBreak()
	}
	if yyb1072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetUtilization = nil
	} else {
		yyv1075 := &x.TargetUtilization
		yym1076 := z.DecBinary()
		_ = yym1076
		if false {
		} else {
			h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1075), d)
		}
	}
	for {
		yyj1072++
		if yyhl1072 {
			yyb1072 = yyj1072 > l
		} else {
			yyb1072 = r.CheckBreak()
		}
		if yyb1072 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1072-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1077 := z.EncBinary()
		_ = yym1077
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1078 := !z.EncBinary()
			yy2arr1078 := z.EncBasicHandle().StructToArray
			var yyq1078 [4]bool
			_, _, _ = yysep1078, yyq1078, yy2arr1078
			const yyr1078 bool = false
			yyq1078[0] = x.Kind != ""
			yyq1078[1] = x.APIVersion != ""
			yyq1078[2] = true
			yyq1078[3] = true
			var yynn1078 int
			if yyr1078 || yy2arr1078 {
				r.EncodeArrayStart(4)
			} else {
				yynn1078 = 0
				for _, b := range yyq1078 {
					if b {
						yynn1078++
					}
				}
				r.EncodeMapStart(yynn1078)
				yynn1078 = 0
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1078[0] {
					yym1080 := z.EncBinary()
					_ = yym1080
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1078[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1081 := z.EncBinary()
					_ = yym1081
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1078[1] {
					yym1083 := z.EncBinary()
					_ = yym1083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1078[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1084 := z.EncBinary()
					_ = yym1084
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1078[2] {
					yy1086 := &x.ObjectMeta
					yym1087 := z.EncBinary()
					_ = yym1087
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1086) {
					} else {
						z.EncFallback(yy1086)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1078[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1088 := &x.ObjectMeta
					yym1089 := z.EncBinary()
					_ = yym1089
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1088) {
					} else {
						z.EncFallback(yy1088)
					}
				}
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1078[3] {
					yy1091 := &x.Spec
					yy1091.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1078[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1092 := &x.Spec
					yy1092.CodecEncodeSelf(e)
				}
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1093 := z.DecBinary()
	_ = yym1093
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1094 := r.ContainerType()
		if yyct1094 == codecSelferValueTypeMap1234 {
			yyl1094 := r.ReadMapStart()
			if yyl1094 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1094, d)
			}
		} else if yyct1094 == codecSelferValueTypeArray1234 {
			yyl1094 := r.ReadArrayStart()
			if yyl1094 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1094, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1095Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1095Slc
	var yyhl1095 bool = l >= 0
	for yyj1095 := 0; ; yyj1095++ {
		if yyhl1095 {
			if yyj1095 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1095Slc = r.DecodeBytes(yys1095Slc, true, true)
		yys1095 := string(yys1095Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1095 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1098 := &x.ObjectMeta
				yym1099 := z.DecBinary()
				_ = yym1099
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1098) {
				} else {
					z.DecFallback(yyv1098, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ClusterAutoscalerSpec{}
			} else {
				yyv1100 := &x.Spec
				yyv1100.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1095)
		} // end switch yys1095
	} // end for yyj1095
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1101 int
	var yyb1101 bool
	var yyhl1101 bool = l >= 0
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1104 := &x.ObjectMeta
		yym1105 := z.DecBinary()
		_ = yym1105
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1104) {
		} else {
			z.DecFallback(yyv1104, false)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ClusterAutoscalerSpec{}
	} else {
		yyv1106 := &x.Spec
		yyv1106.CodecDecodeSelf(d)
	}
	for {
		yyj1101++
		if yyhl1101 {
			yyb1101 = yyj1101 > l
		} else {
			yyb1101 = r.CheckBreak()
		}
		if yyb1101 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1101-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1107 := z.EncBinary()
		_ = yym1107
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1108 := !z.EncBinary()
			yy2arr1108 := z.EncBasicHandle().StructToArray
			var yyq1108 [4]bool
			_, _, _ = yysep1108, yyq1108, yy2arr1108
			const yyr1108 bool = false
			yyq1108[0] = x.Kind != ""
			yyq1108[1] = x.APIVersion != ""
			yyq1108[2] = true
			var yynn1108 int
			if yyr1108 || yy2arr1108 {
				r.EncodeArrayStart(4)
			} else {
				yynn1108 = 1
				for _, b := range yyq1108 {
					if b {
						yynn1108++
					}
				}
				r.EncodeMapStart(yynn1108)
				yynn1108 = 0
			}
			if yyr1108 || yy2arr1108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1108[0] {
					yym1110 := z.EncBinary()
					_ = yym1110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1108[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1111 := z.EncBinary()
					_ = yym1111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1108 || yy2arr1108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1108[1] {
					yym1113 := z.EncBinary()
					_ = yym1113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1108[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1114 := z.EncBinary()
					_ = yym1114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1108 || yy2arr1108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1108[2] {
					yy1116 := &x.ListMeta
					yym1117 := z.EncBinary()
					_ = yym1117
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1116) {
					} else {
						z.EncFallback(yy1116)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1108[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1118 := &x.ListMeta
					yym1119 := z.EncBinary()
					_ = yym1119
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1118) {
					} else {
						z.EncFallback(yy1118)
					}
				}
			}
			if yyr1108 || yy2arr1108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1121 := z.EncBinary()
					_ = yym1121
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1122 := z.EncBinary()
					_ = yym1122
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr1108 || yy2arr1108 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1123 := z.DecBinary()
	_ = yym1123
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1124 := r.ContainerType()
		if yyct1124 == codecSelferValueTypeMap1234 {
			yyl1124 := r.ReadMapStart()
			if yyl1124 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1124, d)
			}
		} else if yyct1124 == codecSelferValueTypeArray1234 {
			yyl1124 := r.ReadArrayStart()
			if yyl1124 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1124, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1125Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1125Slc
	var yyhl1125 bool = l >= 0
	for yyj1125 := 0; ; yyj1125++ {
		if yyhl1125 {
			if yyj1125 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1125Slc = r.DecodeBytes(yys1125Slc, true, true)
		yys1125 := string(yys1125Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1125 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1128 := &x.ListMeta
				yym1129 := z.DecBinary()
				_ = yym1129
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1128) {
				} else {
					z.DecFallback(yyv1128, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1130 := &x.Items
				yym1131 := z.DecBinary()
				_ = yym1131
				if false {
				} else {
					h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1130), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1125)
		} // end switch yys1125
	} // end for yyj1125
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1132 int
	var yyb1132 bool
	var yyhl1132 bool = l >= 0
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1135 := &x.ListMeta
		yym1136 := z.DecBinary()
		_ = yym1136
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1135) {
		} else {
			z.DecFallback(yyv1135, false)
		}
	}
	yyj1132++
	if yyhl1132 {
		yyb1132 = yyj1132 > l
	} else {
		yyb1132 = r.CheckBreak()
	}
	if yyb1132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1137 := &x.Items
		yym1138 := z.DecBinary()
		_ = yym1138
		if false {
		} else {
			h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1137), d)
		}
	}
	for {
		yyj1132++
		if yyhl1132 {
			yyb1132 = yyj1132 > l
		} else {
			yyb1132 = r.CheckBreak()
		}
		if yyb1132 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1132-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1139 := z.EncBinary()
		_ = yym1139
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1140 := !z.EncBinary()
			yy2arr1140 := z.EncBasicHandle().StructToArray
			var yyq1140 [2]bool
			_, _, _ = yysep1140, yyq1140, yy2arr1140
			const yyr1140 bool = false
			yyq1140[0] = len(x.MatchLabels) != 0
			yyq1140[1] = len(x.MatchExpressions) != 0
			var yynn1140 int
			if yyr1140 || yy2arr1140 {
				r.EncodeArrayStart(2)
			} else {
				yynn1140 = 0
				for _, b := range yyq1140 {
					if b {
						yynn1140++
					}
				}
				r.EncodeMapStart(yynn1140)
				yynn1140 = 0
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1140[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1142 := z.EncBinary()
						_ = yym1142
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1140[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1143 := z.EncBinary()
						_ = yym1143
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1140[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1145 := z.EncBinary()
						_ = yym1145
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1140[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1146 := z.EncBinary()
						_ = yym1146
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1147 := z.DecBinary()
	_ = yym1147
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1148 := r.ContainerType()
		if yyct1148 == codecSelferValueTypeMap1234 {
			yyl1148 := r.ReadMapStart()
			if yyl1148 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1148, d)
			}
		} else if yyct1148 == codecSelferValueTypeArray1234 {
			yyl1148 := r.ReadArrayStart()
			if yyl1148 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1148, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1149Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1149Slc
	var yyhl1149 bool = l >= 0
	for yyj1149 := 0; ; yyj1149++ {
		if yyhl1149 {
			if yyj1149 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1149Slc = r.DecodeBytes(yys1149Slc, true, true)
		yys1149 := string(yys1149Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1149 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1150 := &x.MatchLabels
				yym1151 := z.DecBinary()
				_ = yym1151
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1150, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1152 := &x.MatchExpressions
				yym1153 := z.DecBinary()
				_ = yym1153
				if false {
				} else {
					h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1152), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1149)
		} // end switch yys1149
	} // end for yyj1149
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1154 int
	var yyb1154 bool
	var yyhl1154 bool = l >= 0
	yyj1154++
	if yyhl1154 {
		yyb1154 = yyj1154 > l
	} else {
		yyb1154 = r.CheckBreak()
	}
	if yyb1154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1155 := &x.MatchLabels
		yym1156 := z.DecBinary()
		_ = yym1156
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1155, false, d)
		}
	}
	yyj1154++
	if yyhl1154 {
		yyb1154 = yyj1154 > l
	} else {
		yyb1154 = r.CheckBreak()
	}
	if yyb1154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1157 := &x.MatchExpressions
		yym1158 := z.DecBinary()
		_ = yym1158
		if false {
		} else {
			h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1157), d)
		}
	}
	for {
		yyj1154++
		if yyhl1154 {
			yyb1154 = yyj1154 > l
		} else {
			yyb1154 = r.CheckBreak()
		}
		if yyb1154 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1154-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1159 := z.EncBinary()
		_ = yym1159
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1160 := !z.EncBinary()
			yy2arr1160 := z.EncBasicHandle().StructToArray
			var yyq1160 [3]bool
			_, _, _ = yysep1160, yyq1160, yy2arr1160
			const yyr1160 bool = false
			yyq1160[2] = len(x.Values) != 0
			var yynn1160 int
			if yyr1160 || yy2arr1160 {
				r.EncodeArrayStart(3)
			} else {
				yynn1160 = 2
				for _, b := range yyq1160 {
					if b {
						yynn1160++
					}
				}
				r.EncodeMapStart(yynn1160)
				yynn1160 = 0
			}
			if yyr1160 || yy2arr1160 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1162 := z.EncBinary()
				_ = yym1162
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1163 := z.EncBinary()
				_ = yym1163
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1160 || yy2arr1160 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1160 || yy2arr1160 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1160[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1166 := z.EncBinary()
						_ = yym1166
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1160[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1167 := z.EncBinary()
						_ = yym1167
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1160 || yy2arr1160 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1168 := z.DecBinary()
	_ = yym1168
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1169 := r.ContainerType()
		if yyct1169 == codecSelferValueTypeMap1234 {
			yyl1169 := r.ReadMapStart()
			if yyl1169 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1169, d)
			}
		} else if yyct1169 == codecSelferValueTypeArray1234 {
			yyl1169 := r.ReadArrayStart()
			if yyl1169 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1169, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1170Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1170Slc
	var yyhl1170 bool = l >= 0
	for yyj1170 := 0; ; yyj1170++ {
		if yyhl1170 {
			if yyj1170 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1170Slc = r.DecodeBytes(yys1170Slc, true, true)
		yys1170 := string(yys1170Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1170 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = LabelSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1173 := &x.Values
				yym1174 := z.DecBinary()
				_ = yym1174
				if false {
				} else {
					z.F.DecSliceStringX(yyv1173, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1170)
		} // end switch yys1170
	} // end for yyj1170
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1175 int
	var yyb1175 bool
	var yyhl1175 bool = l >= 0
	yyj1175++
	if yyhl1175 {
		yyb1175 = yyj1175 > l
	} else {
		yyb1175 = r.CheckBreak()
	}
	if yyb1175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1175++
	if yyhl1175 {
		yyb1175 = yyj1175 > l
	} else {
		yyb1175 = r.CheckBreak()
	}
	if yyb1175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = LabelSelectorOperator(r.DecodeString())
	}
	yyj1175++
	if yyhl1175 {
		yyb1175 = yyj1175 > l
	} else {
		yyb1175 = r.CheckBreak()
	}
	if yyb1175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1178 := &x.Values
		yym1179 := z.DecBinary()
		_ = yym1179
		if false {
		} else {
			z.F.DecSliceStringX(yyv1178, false, d)
		}
	}
	for {
		yyj1175++
		if yyhl1175 {
			yyb1175 = yyj1175 > l
		} else {
			yyb1175 = r.CheckBreak()
		}
		if yyb1175 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1175-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LabelSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1180 := z.EncBinary()
	_ = yym1180
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LabelSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1181 := z.DecBinary()
	_ = yym1181
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1182 := z.EncBinary()
		_ = yym1182
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1183 := !z.EncBinary()
			yy2arr1183 := z.EncBasicHandle().StructToArray
			var yyq1183 [4]bool
			_, _, _ = yysep1183, yyq1183, yy2arr1183
			const yyr1183 bool = false
			yyq1183[0] = x.Kind != ""
			yyq1183[1] = x.APIVersion != ""
			yyq1183[2] = true
			yyq1183[3] = len(x.Data) != 0
			var yynn1183 int
			if yyr1183 || yy2arr1183 {
				r.EncodeArrayStart(4)
			} else {
				yynn1183 = 0
				for _, b := range yyq1183 {
					if b {
						yynn1183++
					}
				}
				r.EncodeMapStart(yynn1183)
				yynn1183 = 0
			}
			if yyr1183 || yy2arr1183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1183[0] {
					yym1185 := z.EncBinary()
					_ = yym1185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1183[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1186 := z.EncBinary()
					_ = yym1186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1183 || yy2arr1183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1183[1] {
					yym1188 := z.EncBinary()
					_ = yym1188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1183[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1189 := z.EncBinary()
					_ = yym1189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1183 || yy2arr1183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1183[2] {
					yy1191 := &x.ObjectMeta
					yym1192 := z.EncBinary()
					_ = yym1192
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1191) {
					} else {
						z.EncFallback(yy1191)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1183[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1193 := &x.ObjectMeta
					yym1194 := z.EncBinary()
					_ = yym1194
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1193) {
					} else {
						z.EncFallback(yy1193)
					}
				}
			}
			if yyr1183 || yy2arr1183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1183[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym1196 := z.EncBinary()
						_ = yym1196
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1183[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym1197 := z.EncBinary()
						_ = yym1197
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr1183 || yy2arr1183 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1198 := z.DecBinary()
	_ = yym1198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1199 := r.ContainerType()
		if yyct1199 == codecSelferValueTypeMap1234 {
			yyl1199 := r.ReadMapStart()
			if yyl1199 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1199, d)
			}
		} else if yyct1199 == codecSelferValueTypeArray1234 {
			yyl1199 := r.ReadArrayStart()
			if yyl1199 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1200Slc
	var yyhl1200 bool = l >= 0
	for yyj1200 := 0; ; yyj1200++ {
		if yyhl1200 {
			if yyj1200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1200Slc = r.DecodeBytes(yys1200Slc, true, true)
		yys1200 := string(yys1200Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1200 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1203 := &x.ObjectMeta
				yym1204 := z.DecBinary()
				_ = yym1204
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1203) {
				} else {
					z.DecFallback(yyv1203, false)
				}
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv1205 := &x.Data
				yym1206 := z.DecBinary()
				_ = yym1206
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1205, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1200)
		} // end switch yys1200
	} // end for yyj1200
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1207 int
	var yyb1207 bool
	var yyhl1207 bool = l >= 0
	yyj1207++
	if yyhl1207 {
		yyb1207 = yyj1207 > l
	} else {
		yyb1207 = r.CheckBreak()
	}
	if yyb1207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1207++
	if yyhl1207 {
		yyb1207 = yyj1207 > l
	} else {
		yyb1207 = r.CheckBreak()
	}
	if yyb1207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1207++
	if yyhl1207 {
		yyb1207 = yyj1207 > l
	} else {
		yyb1207 = r.CheckBreak()
	}
	if yyb1207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1210 := &x.ObjectMeta
		yym1211 := z.DecBinary()
		_ = yym1211
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1210) {
		} else {
			z.DecFallback(yyv1210, false)
		}
	}
	yyj1207++
	if yyhl1207 {
		yyb1207 = yyj1207 > l
	} else {
		yyb1207 = r.CheckBreak()
	}
	if yyb1207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv1212 := &x.Data
		yym1213 := z.DecBinary()
		_ = yym1213
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1212, false, d)
		}
	}
	for {
		yyj1207++
		if yyhl1207 {
			yyb1207 = yyj1207 > l
		} else {
			yyb1207 = r.CheckBreak()
		}
		if yyb1207 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1207-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1214 := z.EncBinary()
		_ = yym1214
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1215 := !z.EncBinary()
			yy2arr1215 := z.EncBasicHandle().StructToArray
			var yyq1215 [4]bool
			_, _, _ = yysep1215, yyq1215, yy2arr1215
			const yyr1215 bool = false
			yyq1215[0] = x.Kind != ""
			yyq1215[1] = x.APIVersion != ""
			yyq1215[2] = true
			yyq1215[3] = len(x.Items) != 0
			var yynn1215 int
			if yyr1215 || yy2arr1215 {
				r.EncodeArrayStart(4)
			} else {
				yynn1215 = 0
				for _, b := range yyq1215 {
					if b {
						yynn1215++
					}
				}
				r.EncodeMapStart(yynn1215)
				yynn1215 = 0
			}
			if yyr1215 || yy2arr1215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1215[0] {
					yym1217 := z.EncBinary()
					_ = yym1217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1215[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1218 := z.EncBinary()
					_ = yym1218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1215[1] {
					yym1220 := z.EncBinary()
					_ = yym1220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1215[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1221 := z.EncBinary()
					_ = yym1221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1215[2] {
					yy1223 := &x.ListMeta
					yym1224 := z.EncBinary()
					_ = yym1224
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1223) {
					} else {
						z.EncFallback(yy1223)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1215[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1225 := &x.ListMeta
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1225) {
					} else {
						z.EncFallback(yy1225)
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1215[3] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1228 := z.EncBinary()
						_ = yym1228
						if false {
						} else {
							h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1215[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1229 := z.EncBinary()
						_ = yym1229
						if false {
						} else {
							h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
						}
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1230 := z.DecBinary()
	_ = yym1230
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1231 := r.ContainerType()
		if yyct1231 == codecSelferValueTypeMap1234 {
			yyl1231 := r.ReadMapStart()
			if yyl1231 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1231, d)
			}
		} else if yyct1231 == codecSelferValueTypeArray1234 {
			yyl1231 := r.ReadArrayStart()
			if yyl1231 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1231, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1232Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1232Slc
	var yyhl1232 bool = l >= 0
	for yyj1232 := 0; ; yyj1232++ {
		if yyhl1232 {
			if yyj1232 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1232Slc = r.DecodeBytes(yys1232Slc, true, true)
		yys1232 := string(yys1232Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1232 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1235 := &x.ListMeta
				yym1236 := z.DecBinary()
				_ = yym1236
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1235) {
				} else {
					z.DecFallback(yyv1235, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1237 := &x.Items
				yym1238 := z.DecBinary()
				_ = yym1238
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv1237), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1232)
		} // end switch yys1232
	} // end for yyj1232
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1239 int
	var yyb1239 bool
	var yyhl1239 bool = l >= 0
	yyj1239++
	if yyhl1239 {
		yyb1239 = yyj1239 > l
	} else {
		yyb1239 = r.CheckBreak()
	}
	if yyb1239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1239++
	if yyhl1239 {
		yyb1239 = yyj1239 > l
	} else {
		yyb1239 = r.CheckBreak()
	}
	if yyb1239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1239++
	if yyhl1239 {
		yyb1239 = yyj1239 > l
	} else {
		yyb1239 = r.CheckBreak()
	}
	if yyb1239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1242 := &x.ListMeta
		yym1243 := z.DecBinary()
		_ = yym1243
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1242) {
		} else {
			z.DecFallback(yyv1242, false)
		}
	}
	yyj1239++
	if yyhl1239 {
		yyb1239 = yyj1239 > l
	} else {
		yyb1239 = r.CheckBreak()
	}
	if yyb1239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1244 := &x.Items
		yym1245 := z.DecBinary()
		_ = yym1245
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv1244), d)
		}
	}
	for {
		yyj1239++
		if yyhl1239 {
			yyb1239 = yyj1239 > l
		} else {
			yyb1239 = r.CheckBreak()
		}
		if yyb1239 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1239-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1246 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1247 := &yyv1246
		yy1247.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1248 := *v
	yyh1248, yyl1248 := z.DecSliceHelperStart()
	var yyc1248 bool
	if yyl1248 == 0 {
		if yyv1248 == nil {
			yyv1248 = []HorizontalPodAutoscaler{}
			yyc1248 = true
		} else if len(yyv1248) != 0 {
			yyv1248 = yyv1248[:0]
			yyc1248 = true
		}
	} else if yyl1248 > 0 {
		var yyrr1248, yyrl1248 int
		var yyrt1248 bool
		if yyl1248 > cap(yyv1248) {

			yyrg1248 := len(yyv1248) > 0
			yyv21248 := yyv1248
			yyrl1248, yyrt1248 = z.DecInferLen(yyl1248, z.DecBasicHandle().MaxInitLen, 320)
			if yyrt1248 {
				if yyrl1248 <= cap(yyv1248) {
					yyv1248 = yyv1248[:yyrl1248]
				} else {
					yyv1248 = make([]HorizontalPodAutoscaler, yyrl1248)
				}
			} else {
				yyv1248 = make([]HorizontalPodAutoscaler, yyrl1248)
			}
			yyc1248 = true
			yyrr1248 = len(yyv1248)
			if yyrg1248 {
				copy(yyv1248, yyv21248)
			}
		} else if yyl1248 != len(yyv1248) {
			yyv1248 = yyv1248[:yyl1248]
			yyc1248 = true
		}
		yyj1248 := 0
		for ; yyj1248 < yyrr1248; yyj1248++ {
			yyh1248.ElemContainerState(yyj1248)
			if r.TryDecodeAsNil() {
				yyv1248[yyj1248] = HorizontalPodAutoscaler{}
			} else {
				yyv1249 := &yyv1248[yyj1248]
				yyv1249.CodecDecodeSelf(d)
			}

		}
		if yyrt1248 {
			for ; yyj1248 < yyl1248; yyj1248++ {
				yyv1248 = append(yyv1248, HorizontalPodAutoscaler{})
				yyh1248.ElemContainerState(yyj1248)
				if r.TryDecodeAsNil() {
					yyv1248[yyj1248] = HorizontalPodAutoscaler{}
				} else {
					yyv1250 := &yyv1248[yyj1248]
					yyv1250.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1248 := 0
		for ; !r.CheckBreak(); yyj1248++ {

			if yyj1248 >= len(yyv1248) {
				yyv1248 = append(yyv1248, HorizontalPodAutoscaler{}) // var yyz1248 HorizontalPodAutoscaler
				yyc1248 = true
			}
			yyh1248.ElemContainerState(yyj1248)
			if yyj1248 < len(yyv1248) {
				if r.TryDecodeAsNil() {
					yyv1248[yyj1248] = HorizontalPodAutoscaler{}
				} else {
					yyv1251 := &yyv1248[yyj1248]
					yyv1251.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1248 < len(yyv1248) {
			yyv1248 = yyv1248[:yyj1248]
			yyc1248 = true
		} else if yyj1248 == 0 && yyv1248 == nil {
			yyv1248 = []HorizontalPodAutoscaler{}
			yyc1248 = true
		}
	}
	yyh1248.End()
	if yyc1248 {
		*v = yyv1248
	}
}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1252 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1253 := &yyv1252
		yy1253.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1254 := *v
	yyh1254, yyl1254 := z.DecSliceHelperStart()
	var yyc1254 bool
	if yyl1254 == 0 {
		if yyv1254 == nil {
			yyv1254 = []APIVersion{}
			yyc1254 = true
		} else if len(yyv1254) != 0 {
			yyv1254 = yyv1254[:0]
			yyc1254 = true
		}
	} else if yyl1254 > 0 {
		var yyrr1254, yyrl1254 int
		var yyrt1254 bool
		if yyl1254 > cap(yyv1254) {

			yyrg1254 := len(yyv1254) > 0
			yyv21254 := yyv1254
			yyrl1254, yyrt1254 = z.DecInferLen(yyl1254, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt1254 {
				if yyrl1254 <= cap(yyv1254) {
					yyv1254 = yyv1254[:yyrl1254]
				} else {
					yyv1254 = make([]APIVersion, yyrl1254)
				}
			} else {
				yyv1254 = make([]APIVersion, yyrl1254)
			}
			yyc1254 = true
			yyrr1254 = len(yyv1254)
			if yyrg1254 {
				copy(yyv1254, yyv21254)
			}
		} else if yyl1254 != len(yyv1254) {
			yyv1254 = yyv1254[:yyl1254]
			yyc1254 = true
		}
		yyj1254 := 0
		for ; yyj1254 < yyrr1254; yyj1254++ {
			yyh1254.ElemContainerState(yyj1254)
			if r.TryDecodeAsNil() {
				yyv1254[yyj1254] = APIVersion{}
			} else {
				yyv1255 := &yyv1254[yyj1254]
				yyv1255.CodecDecodeSelf(d)
			}

		}
		if yyrt1254 {
			for ; yyj1254 < yyl1254; yyj1254++ {
				yyv1254 = append(yyv1254, APIVersion{})
				yyh1254.ElemContainerState(yyj1254)
				if r.TryDecodeAsNil() {
					yyv1254[yyj1254] = APIVersion{}
				} else {
					yyv1256 := &yyv1254[yyj1254]
					yyv1256.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1254 := 0
		for ; !r.CheckBreak(); yyj1254++ {

			if yyj1254 >= len(yyv1254) {
				yyv1254 = append(yyv1254, APIVersion{}) // var yyz1254 APIVersion
				yyc1254 = true
			}
			yyh1254.ElemContainerState(yyj1254)
			if yyj1254 < len(yyv1254) {
				if r.TryDecodeAsNil() {
					yyv1254[yyj1254] = APIVersion{}
				} else {
					yyv1257 := &yyv1254[yyj1254]
					yyv1257.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1254 < len(yyv1254) {
			yyv1254 = yyv1254[:yyj1254]
			yyc1254 = true
		} else if yyj1254 == 0 && yyv1254 == nil {
			yyv1254 = []APIVersion{}
			yyc1254 = true
		}
	}
	yyh1254.End()
	if yyc1254 {
		*v = yyv1254
	}
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1258 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1259 := &yyv1258
		yy1259.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1260 := *v
	yyh1260, yyl1260 := z.DecSliceHelperStart()
	var yyc1260 bool
	if yyl1260 == 0 {
		if yyv1260 == nil {
			yyv1260 = []ThirdPartyResource{}
			yyc1260 = true
		} else if len(yyv1260) != 0 {
			yyv1260 = yyv1260[:0]
			yyc1260 = true
		}
	} else if yyl1260 > 0 {
		var yyrr1260, yyrl1260 int
		var yyrt1260 bool
		if yyl1260 > cap(yyv1260) {

			yyrg1260 := len(yyv1260) > 0
			yyv21260 := yyv1260
			yyrl1260, yyrt1260 = z.DecInferLen(yyl1260, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1260 {
				if yyrl1260 <= cap(yyv1260) {
					yyv1260 = yyv1260[:yyrl1260]
				} else {
					yyv1260 = make([]ThirdPartyResource, yyrl1260)
				}
			} else {
				yyv1260 = make([]ThirdPartyResource, yyrl1260)
			}
			yyc1260 = true
			yyrr1260 = len(yyv1260)
			if yyrg1260 {
				copy(yyv1260, yyv21260)
			}
		} else if yyl1260 != len(yyv1260) {
			yyv1260 = yyv1260[:yyl1260]
			yyc1260 = true
		}
		yyj1260 := 0
		for ; yyj1260 < yyrr1260; yyj1260++ {
			yyh1260.ElemContainerState(yyj1260)
			if r.TryDecodeAsNil() {
				yyv1260[yyj1260] = ThirdPartyResource{}
			} else {
				yyv1261 := &yyv1260[yyj1260]
				yyv1261.CodecDecodeSelf(d)
			}

		}
		if yyrt1260 {
			for ; yyj1260 < yyl1260; yyj1260++ {
				yyv1260 = append(yyv1260, ThirdPartyResource{})
				yyh1260.ElemContainerState(yyj1260)
				if r.TryDecodeAsNil() {
					yyv1260[yyj1260] = ThirdPartyResource{}
				} else {
					yyv1262 := &yyv1260[yyj1260]
					yyv1262.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1260 := 0
		for ; !r.CheckBreak(); yyj1260++ {

			if yyj1260 >= len(yyv1260) {
				yyv1260 = append(yyv1260, ThirdPartyResource{}) // var yyz1260 ThirdPartyResource
				yyc1260 = true
			}
			yyh1260.ElemContainerState(yyj1260)
			if yyj1260 < len(yyv1260) {
				if r.TryDecodeAsNil() {
					yyv1260[yyj1260] = ThirdPartyResource{}
				} else {
					yyv1263 := &yyv1260[yyj1260]
					yyv1263.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1260 < len(yyv1260) {
			yyv1260 = yyv1260[:yyj1260]
			yyc1260 = true
		} else if yyj1260 == 0 && yyv1260 == nil {
			yyv1260 = []ThirdPartyResource{}
			yyc1260 = true
		}
	}
	yyh1260.End()
	if yyc1260 {
		*v = yyv1260
	}
}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1264 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1265 := &yyv1264
		yy1265.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1266 := *v
	yyh1266, yyl1266 := z.DecSliceHelperStart()
	var yyc1266 bool
	if yyl1266 == 0 {
		if yyv1266 == nil {
			yyv1266 = []Deployment{}
			yyc1266 = true
		} else if len(yyv1266) != 0 {
			yyv1266 = yyv1266[:0]
			yyc1266 = true
		}
	} else if yyl1266 > 0 {
		var yyrr1266, yyrl1266 int
		var yyrt1266 bool
		if yyl1266 > cap(yyv1266) {

			yyrg1266 := len(yyv1266) > 0
			yyv21266 := yyv1266
			yyrl1266, yyrt1266 = z.DecInferLen(yyl1266, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt1266 {
				if yyrl1266 <= cap(yyv1266) {
					yyv1266 = yyv1266[:yyrl1266]
				} else {
					yyv1266 = make([]Deployment, yyrl1266)
				}
			} else {
				yyv1266 = make([]Deployment, yyrl1266)
			}
			yyc1266 = true
			yyrr1266 = len(yyv1266)
			if yyrg1266 {
				copy(yyv1266, yyv21266)
			}
		} else if yyl1266 != len(yyv1266) {
			yyv1266 = yyv1266[:yyl1266]
			yyc1266 = true
		}
		yyj1266 := 0
		for ; yyj1266 < yyrr1266; yyj1266++ {
			yyh1266.ElemContainerState(yyj1266)
			if r.TryDecodeAsNil() {
				yyv1266[yyj1266] = Deployment{}
			} else {
				yyv1267 := &yyv1266[yyj1266]
				yyv1267.CodecDecodeSelf(d)
			}

		}
		if yyrt1266 {
			for ; yyj1266 < yyl1266; yyj1266++ {
				yyv1266 = append(yyv1266, Deployment{})
				yyh1266.ElemContainerState(yyj1266)
				if r.TryDecodeAsNil() {
					yyv1266[yyj1266] = Deployment{}
				} else {
					yyv1268 := &yyv1266[yyj1266]
					yyv1268.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1266 := 0
		for ; !r.CheckBreak(); yyj1266++ {

			if yyj1266 >= len(yyv1266) {
				yyv1266 = append(yyv1266, Deployment{}) // var yyz1266 Deployment
				yyc1266 = true
			}
			yyh1266.ElemContainerState(yyj1266)
			if yyj1266 < len(yyv1266) {
				if r.TryDecodeAsNil() {
					yyv1266[yyj1266] = Deployment{}
				} else {
					yyv1269 := &yyv1266[yyj1266]
					yyv1269.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1266 < len(yyv1266) {
			yyv1266 = yyv1266[:yyj1266]
			yyc1266 = true
		} else if yyj1266 == 0 && yyv1266 == nil {
			yyv1266 = []Deployment{}
			yyc1266 = true
		}
	}
	yyh1266.End()
	if yyc1266 {
		*v = yyv1266
	}
}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1270 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1271 := &yyv1270
		yy1271.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1272 := *v
	yyh1272, yyl1272 := z.DecSliceHelperStart()
	var yyc1272 bool
	if yyl1272 == 0 {
		if yyv1272 == nil {
			yyv1272 = []DaemonSet{}
			yyc1272 = true
		} else if len(yyv1272) != 0 {
			yyv1272 = yyv1272[:0]
			yyc1272 = true
		}
	} else if yyl1272 > 0 {
		var yyrr1272, yyrl1272 int
		var yyrt1272 bool
		if yyl1272 > cap(yyv1272) {

			yyrg1272 := len(yyv1272) > 0
			yyv21272 := yyv1272
			yyrl1272, yyrt1272 = z.DecInferLen(yyl1272, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1272 {
				if yyrl1272 <= cap(yyv1272) {
					yyv1272 = yyv1272[:yyrl1272]
				} else {
					yyv1272 = make([]DaemonSet, yyrl1272)
				}
			} else {
				yyv1272 = make([]DaemonSet, yyrl1272)
			}
			yyc1272 = true
			yyrr1272 = len(yyv1272)
			if yyrg1272 {
				copy(yyv1272, yyv21272)
			}
		} else if yyl1272 != len(yyv1272) {
			yyv1272 = yyv1272[:yyl1272]
			yyc1272 = true
		}
		yyj1272 := 0
		for ; yyj1272 < yyrr1272; yyj1272++ {
			yyh1272.ElemContainerState(yyj1272)
			if r.TryDecodeAsNil() {
				yyv1272[yyj1272] = DaemonSet{}
			} else {
				yyv1273 := &yyv1272[yyj1272]
				yyv1273.CodecDecodeSelf(d)
			}

		}
		if yyrt1272 {
			for ; yyj1272 < yyl1272; yyj1272++ {
				yyv1272 = append(yyv1272, DaemonSet{})
				yyh1272.ElemContainerState(yyj1272)
				if r.TryDecodeAsNil() {
					yyv1272[yyj1272] = DaemonSet{}
				} else {
					yyv1274 := &yyv1272[yyj1272]
					yyv1274.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1272 := 0
		for ; !r.CheckBreak(); yyj1272++ {

			if yyj1272 >= len(yyv1272) {
				yyv1272 = append(yyv1272, DaemonSet{}) // var yyz1272 DaemonSet
				yyc1272 = true
			}
			yyh1272.ElemContainerState(yyj1272)
			if yyj1272 < len(yyv1272) {
				if r.TryDecodeAsNil() {
					yyv1272[yyj1272] = DaemonSet{}
				} else {
					yyv1275 := &yyv1272[yyj1272]
					yyv1275.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1272 < len(yyv1272) {
			yyv1272 = yyv1272[:yyj1272]
			yyc1272 = true
		} else if yyj1272 == 0 && yyv1272 == nil {
			yyv1272 = []DaemonSet{}
			yyc1272 = true
		}
	}
	yyh1272.End()
	if yyc1272 {
		*v = yyv1272
	}
}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1276 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1277 := &yyv1276
		yy1277.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1278 := *v
	yyh1278, yyl1278 := z.DecSliceHelperStart()
	var yyc1278 bool
	if yyl1278 == 0 {
		if yyv1278 == nil {
			yyv1278 = []ThirdPartyResourceData{}
			yyc1278 = true
		} else if len(yyv1278) != 0 {
			yyv1278 = yyv1278[:0]
			yyc1278 = true
		}
	} else if yyl1278 > 0 {
		var yyrr1278, yyrl1278 int
		var yyrt1278 bool
		if yyl1278 > cap(yyv1278) {

			yyrg1278 := len(yyv1278) > 0
			yyv21278 := yyv1278
			yyrl1278, yyrt1278 = z.DecInferLen(yyl1278, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt1278 {
				if yyrl1278 <= cap(yyv1278) {
					yyv1278 = yyv1278[:yyrl1278]
				} else {
					yyv1278 = make([]ThirdPartyResourceData, yyrl1278)
				}
			} else {
				yyv1278 = make([]ThirdPartyResourceData, yyrl1278)
			}
			yyc1278 = true
			yyrr1278 = len(yyv1278)
			if yyrg1278 {
				copy(yyv1278, yyv21278)
			}
		} else if yyl1278 != len(yyv1278) {
			yyv1278 = yyv1278[:yyl1278]
			yyc1278 = true
		}
		yyj1278 := 0
		for ; yyj1278 < yyrr1278; yyj1278++ {
			yyh1278.ElemContainerState(yyj1278)
			if r.TryDecodeAsNil() {
				yyv1278[yyj1278] = ThirdPartyResourceData{}
			} else {
				yyv1279 := &yyv1278[yyj1278]
				yyv1279.CodecDecodeSelf(d)
			}

		}
		if yyrt1278 {
			for ; yyj1278 < yyl1278; yyj1278++ {
				yyv1278 = append(yyv1278, ThirdPartyResourceData{})
				yyh1278.ElemContainerState(yyj1278)
				if r.TryDecodeAsNil() {
					yyv1278[yyj1278] = ThirdPartyResourceData{}
				} else {
					yyv1280 := &yyv1278[yyj1278]
					yyv1280.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1278 := 0
		for ; !r.CheckBreak(); yyj1278++ {

			if yyj1278 >= len(yyv1278) {
				yyv1278 = append(yyv1278, ThirdPartyResourceData{}) // var yyz1278 ThirdPartyResourceData
				yyc1278 = true
			}
			yyh1278.ElemContainerState(yyj1278)
			if yyj1278 < len(yyv1278) {
				if r.TryDecodeAsNil() {
					yyv1278[yyj1278] = ThirdPartyResourceData{}
				} else {
					yyv1281 := &yyv1278[yyj1278]
					yyv1281.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1278 < len(yyv1278) {
			yyv1278 = yyv1278[:yyj1278]
			yyc1278 = true
		} else if yyj1278 == 0 && yyv1278 == nil {
			yyv1278 = []ThirdPartyResourceData{}
			yyc1278 = true
		}
	}
	yyh1278.End()
	if yyc1278 {
		*v = yyv1278
	}
}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1282 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1283 := &yyv1282
		yy1283.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1284 := *v
	yyh1284, yyl1284 := z.DecSliceHelperStart()
	var yyc1284 bool
	if yyl1284 == 0 {
		if yyv1284 == nil {
			yyv1284 = []Job{}
			yyc1284 = true
		} else if len(yyv1284) != 0 {
			yyv1284 = yyv1284[:0]
			yyc1284 = true
		}
	} else if yyl1284 > 0 {
		var yyrr1284, yyrl1284 int
		var yyrt1284 bool
		if yyl1284 > cap(yyv1284) {

			yyrg1284 := len(yyv1284) > 0
			yyv21284 := yyv1284
			yyrl1284, yyrt1284 = z.DecInferLen(yyl1284, z.DecBasicHandle().MaxInitLen, 640)
			if yyrt1284 {
				if yyrl1284 <= cap(yyv1284) {
					yyv1284 = yyv1284[:yyrl1284]
				} else {
					yyv1284 = make([]Job, yyrl1284)
				}
			} else {
				yyv1284 = make([]Job, yyrl1284)
			}
			yyc1284 = true
			yyrr1284 = len(yyv1284)
			if yyrg1284 {
				copy(yyv1284, yyv21284)
			}
		} else if yyl1284 != len(yyv1284) {
			yyv1284 = yyv1284[:yyl1284]
			yyc1284 = true
		}
		yyj1284 := 0
		for ; yyj1284 < yyrr1284; yyj1284++ {
			yyh1284.ElemContainerState(yyj1284)
			if r.TryDecodeAsNil() {
				yyv1284[yyj1284] = Job{}
			} else {
				yyv1285 := &yyv1284[yyj1284]
				yyv1285.CodecDecodeSelf(d)
			}

		}
		if yyrt1284 {
			for ; yyj1284 < yyl1284; yyj1284++ {
				yyv1284 = append(yyv1284, Job{})
				yyh1284.ElemContainerState(yyj1284)
				if r.TryDecodeAsNil() {
					yyv1284[yyj1284] = Job{}
				} else {
					yyv1286 := &yyv1284[yyj1284]
					yyv1286.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1284 := 0
		for ; !r.CheckBreak(); yyj1284++ {

			if yyj1284 >= len(yyv1284) {
				yyv1284 = append(yyv1284, Job{}) // var yyz1284 Job
				yyc1284 = true
			}
			yyh1284.ElemContainerState(yyj1284)
			if yyj1284 < len(yyv1284) {
				if r.TryDecodeAsNil() {
					yyv1284[yyj1284] = Job{}
				} else {
					yyv1287 := &yyv1284[yyj1284]
					yyv1287.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1284 < len(yyv1284) {
			yyv1284 = yyv1284[:yyj1284]
			yyc1284 = true
		} else if yyj1284 == 0 && yyv1284 == nil {
			yyv1284 = []Job{}
			yyc1284 = true
		}
	}
	yyh1284.End()
	if yyc1284 {
		*v = yyv1284
	}
}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1288 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1289 := &yyv1288
		yy1289.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1290 := *v
	yyh1290, yyl1290 := z.DecSliceHelperStart()
	var yyc1290 bool
	if yyl1290 == 0 {
		if yyv1290 == nil {
			yyv1290 = []JobCondition{}
			yyc1290 = true
		} else if len(yyv1290) != 0 {
			yyv1290 = yyv1290[:0]
			yyc1290 = true
		}
	} else if yyl1290 > 0 {
		var yyrr1290, yyrl1290 int
		var yyrt1290 bool
		if yyl1290 > cap(yyv1290) {

			yyrg1290 := len(yyv1290) > 0
			yyv21290 := yyv1290
			yyrl1290, yyrt1290 = z.DecInferLen(yyl1290, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1290 {
				if yyrl1290 <= cap(yyv1290) {
					yyv1290 = yyv1290[:yyrl1290]
				} else {
					yyv1290 = make([]JobCondition, yyrl1290)
				}
			} else {
				yyv1290 = make([]JobCondition, yyrl1290)
			}
			yyc1290 = true
			yyrr1290 = len(yyv1290)
			if yyrg1290 {
				copy(yyv1290, yyv21290)
			}
		} else if yyl1290 != len(yyv1290) {
			yyv1290 = yyv1290[:yyl1290]
			yyc1290 = true
		}
		yyj1290 := 0
		for ; yyj1290 < yyrr1290; yyj1290++ {
			yyh1290.ElemContainerState(yyj1290)
			if r.TryDecodeAsNil() {
				yyv1290[yyj1290] = JobCondition{}
			} else {
				yyv1291 := &yyv1290[yyj1290]
				yyv1291.CodecDecodeSelf(d)
			}

		}
		if yyrt1290 {
			for ; yyj1290 < yyl1290; yyj1290++ {
				yyv1290 = append(yyv1290, JobCondition{})
				yyh1290.ElemContainerState(yyj1290)
				if r.TryDecodeAsNil() {
					yyv1290[yyj1290] = JobCondition{}
				} else {
					yyv1292 := &yyv1290[yyj1290]
					yyv1292.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1290 := 0
		for ; !r.CheckBreak(); yyj1290++ {

			if yyj1290 >= len(yyv1290) {
				yyv1290 = append(yyv1290, JobCondition{}) // var yyz1290 JobCondition
				yyc1290 = true
			}
			yyh1290.ElemContainerState(yyj1290)
			if yyj1290 < len(yyv1290) {
				if r.TryDecodeAsNil() {
					yyv1290[yyj1290] = JobCondition{}
				} else {
					yyv1293 := &yyv1290[yyj1290]
					yyv1293.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1290 < len(yyv1290) {
			yyv1290 = yyv1290[:yyj1290]
			yyc1290 = true
		} else if yyj1290 == 0 && yyv1290 == nil {
			yyv1290 = []JobCondition{}
			yyc1290 = true
		}
	}
	yyh1290.End()
	if yyc1290 {
		*v = yyv1290
	}
}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1294 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1295 := &yyv1294
		yy1295.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1296 := *v
	yyh1296, yyl1296 := z.DecSliceHelperStart()
	var yyc1296 bool
	if yyl1296 == 0 {
		if yyv1296 == nil {
			yyv1296 = []Ingress{}
			yyc1296 = true
		} else if len(yyv1296) != 0 {
			yyv1296 = yyv1296[:0]
			yyc1296 = true
		}
	} else if yyl1296 > 0 {
		var yyrr1296, yyrl1296 int
		var yyrt1296 bool
		if yyl1296 > cap(yyv1296) {

			yyrg1296 := len(yyv1296) > 0
			yyv21296 := yyv1296
			yyrl1296, yyrt1296 = z.DecInferLen(yyl1296, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt1296 {
				if yyrl1296 <= cap(yyv1296) {
					yyv1296 = yyv1296[:yyrl1296]
				} else {
					yyv1296 = make([]Ingress, yyrl1296)
				}
			} else {
				yyv1296 = make([]Ingress, yyrl1296)
			}
			yyc1296 = true
			yyrr1296 = len(yyv1296)
			if yyrg1296 {
				copy(yyv1296, yyv21296)
			}
		} else if yyl1296 != len(yyv1296) {
			yyv1296 = yyv1296[:yyl1296]
			yyc1296 = true
		}
		yyj1296 := 0
		for ; yyj1296 < yyrr1296; yyj1296++ {
			yyh1296.ElemContainerState(yyj1296)
			if r.TryDecodeAsNil() {
				yyv1296[yyj1296] = Ingress{}
			} else {
				yyv1297 := &yyv1296[yyj1296]
				yyv1297.CodecDecodeSelf(d)
			}

		}
		if yyrt1296 {
			for ; yyj1296 < yyl1296; yyj1296++ {
				yyv1296 = append(yyv1296, Ingress{})
				yyh1296.ElemContainerState(yyj1296)
				if r.TryDecodeAsNil() {
					yyv1296[yyj1296] = Ingress{}
				} else {
					yyv1298 := &yyv1296[yyj1296]
					yyv1298.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1296 := 0
		for ; !r.CheckBreak(); yyj1296++ {

			if yyj1296 >= len(yyv1296) {
				yyv1296 = append(yyv1296, Ingress{}) // var yyz1296 Ingress
				yyc1296 = true
			}
			yyh1296.ElemContainerState(yyj1296)
			if yyj1296 < len(yyv1296) {
				if r.TryDecodeAsNil() {
					yyv1296[yyj1296] = Ingress{}
				} else {
					yyv1299 := &yyv1296[yyj1296]
					yyv1299.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1296 < len(yyv1296) {
			yyv1296 = yyv1296[:yyj1296]
			yyc1296 = true
		} else if yyj1296 == 0 && yyv1296 == nil {
			yyv1296 = []Ingress{}
			yyc1296 = true
		}
	}
	yyh1296.End()
	if yyc1296 {
		*v = yyv1296
	}
}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1300 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1301 := &yyv1300
		yy1301.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1302 := *v
	yyh1302, yyl1302 := z.DecSliceHelperStart()
	var yyc1302 bool
	if yyl1302 == 0 {
		if yyv1302 == nil {
			yyv1302 = []IngressRule{}
			yyc1302 = true
		} else if len(yyv1302) != 0 {
			yyv1302 = yyv1302[:0]
			yyc1302 = true
		}
	} else if yyl1302 > 0 {
		var yyrr1302, yyrl1302 int
		var yyrt1302 bool
		if yyl1302 > cap(yyv1302) {

			yyrg1302 := len(yyv1302) > 0
			yyv21302 := yyv1302
			yyrl1302, yyrt1302 = z.DecInferLen(yyl1302, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1302 {
				if yyrl1302 <= cap(yyv1302) {
					yyv1302 = yyv1302[:yyrl1302]
				} else {
					yyv1302 = make([]IngressRule, yyrl1302)
				}
			} else {
				yyv1302 = make([]IngressRule, yyrl1302)
			}
			yyc1302 = true
			yyrr1302 = len(yyv1302)
			if yyrg1302 {
				copy(yyv1302, yyv21302)
			}
		} else if yyl1302 != len(yyv1302) {
			yyv1302 = yyv1302[:yyl1302]
			yyc1302 = true
		}
		yyj1302 := 0
		for ; yyj1302 < yyrr1302; yyj1302++ {
			yyh1302.ElemContainerState(yyj1302)
			if r.TryDecodeAsNil() {
				yyv1302[yyj1302] = IngressRule{}
			} else {
				yyv1303 := &yyv1302[yyj1302]
				yyv1303.CodecDecodeSelf(d)
			}

		}
		if yyrt1302 {
			for ; yyj1302 < yyl1302; yyj1302++ {
				yyv1302 = append(yyv1302, IngressRule{})
				yyh1302.ElemContainerState(yyj1302)
				if r.TryDecodeAsNil() {
					yyv1302[yyj1302] = IngressRule{}
				} else {
					yyv1304 := &yyv1302[yyj1302]
					yyv1304.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1302 := 0
		for ; !r.CheckBreak(); yyj1302++ {

			if yyj1302 >= len(yyv1302) {
				yyv1302 = append(yyv1302, IngressRule{}) // var yyz1302 IngressRule
				yyc1302 = true
			}
			yyh1302.ElemContainerState(yyj1302)
			if yyj1302 < len(yyv1302) {
				if r.TryDecodeAsNil() {
					yyv1302[yyj1302] = IngressRule{}
				} else {
					yyv1305 := &yyv1302[yyj1302]
					yyv1305.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1302 < len(yyv1302) {
			yyv1302 = yyv1302[:yyj1302]
			yyc1302 = true
		} else if yyj1302 == 0 && yyv1302 == nil {
			yyv1302 = []IngressRule{}
			yyc1302 = true
		}
	}
	yyh1302.End()
	if yyc1302 {
		*v = yyv1302
	}
}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1306 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1307 := &yyv1306
		yy1307.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1308 := *v
	yyh1308, yyl1308 := z.DecSliceHelperStart()
	var yyc1308 bool
	if yyl1308 == 0 {
		if yyv1308 == nil {
			yyv1308 = []HTTPIngressPath{}
			yyc1308 = true
		} else if len(yyv1308) != 0 {
			yyv1308 = yyv1308[:0]
			yyc1308 = true
		}
	} else if yyl1308 > 0 {
		var yyrr1308, yyrl1308 int
		var yyrt1308 bool
		if yyl1308 > cap(yyv1308) {

			yyrg1308 := len(yyv1308) > 0
			yyv21308 := yyv1308
			yyrl1308, yyrt1308 = z.DecInferLen(yyl1308, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt1308 {
				if yyrl1308 <= cap(yyv1308) {
					yyv1308 = yyv1308[:yyrl1308]
				} else {
					yyv1308 = make([]HTTPIngressPath, yyrl1308)
				}
			} else {
				yyv1308 = make([]HTTPIngressPath, yyrl1308)
			}
			yyc1308 = true
			yyrr1308 = len(yyv1308)
			if yyrg1308 {
				copy(yyv1308, yyv21308)
			}
		} else if yyl1308 != len(yyv1308) {
			yyv1308 = yyv1308[:yyl1308]
			yyc1308 = true
		}
		yyj1308 := 0
		for ; yyj1308 < yyrr1308; yyj1308++ {
			yyh1308.ElemContainerState(yyj1308)
			if r.TryDecodeAsNil() {
				yyv1308[yyj1308] = HTTPIngressPath{}
			} else {
				yyv1309 := &yyv1308[yyj1308]
				yyv1309.CodecDecodeSelf(d)
			}

		}
		if yyrt1308 {
			for ; yyj1308 < yyl1308; yyj1308++ {
				yyv1308 = append(yyv1308, HTTPIngressPath{})
				yyh1308.ElemContainerState(yyj1308)
				if r.TryDecodeAsNil() {
					yyv1308[yyj1308] = HTTPIngressPath{}
				} else {
					yyv1310 := &yyv1308[yyj1308]
					yyv1310.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1308 := 0
		for ; !r.CheckBreak(); yyj1308++ {

			if yyj1308 >= len(yyv1308) {
				yyv1308 = append(yyv1308, HTTPIngressPath{}) // var yyz1308 HTTPIngressPath
				yyc1308 = true
			}
			yyh1308.ElemContainerState(yyj1308)
			if yyj1308 < len(yyv1308) {
				if r.TryDecodeAsNil() {
					yyv1308[yyj1308] = HTTPIngressPath{}
				} else {
					yyv1311 := &yyv1308[yyj1308]
					yyv1311.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1308 < len(yyv1308) {
			yyv1308 = yyv1308[:yyj1308]
			yyc1308 = true
		} else if yyj1308 == 0 && yyv1308 == nil {
			yyv1308 = []HTTPIngressPath{}
			yyc1308 = true
		}
	}
	yyh1308.End()
	if yyc1308 {
		*v = yyv1308
	}
}

func (x codecSelfer1234) encSliceNodeUtilization(v []NodeUtilization, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1312 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1313 := &yyv1312
		yy1313.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeUtilization(v *[]NodeUtilization, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1314 := *v
	yyh1314, yyl1314 := z.DecSliceHelperStart()
	var yyc1314 bool
	if yyl1314 == 0 {
		if yyv1314 == nil {
			yyv1314 = []NodeUtilization{}
			yyc1314 = true
		} else if len(yyv1314) != 0 {
			yyv1314 = yyv1314[:0]
			yyc1314 = true
		}
	} else if yyl1314 > 0 {
		var yyrr1314, yyrl1314 int
		var yyrt1314 bool
		if yyl1314 > cap(yyv1314) {

			yyrg1314 := len(yyv1314) > 0
			yyv21314 := yyv1314
			yyrl1314, yyrt1314 = z.DecInferLen(yyl1314, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1314 {
				if yyrl1314 <= cap(yyv1314) {
					yyv1314 = yyv1314[:yyrl1314]
				} else {
					yyv1314 = make([]NodeUtilization, yyrl1314)
				}
			} else {
				yyv1314 = make([]NodeUtilization, yyrl1314)
			}
			yyc1314 = true
			yyrr1314 = len(yyv1314)
			if yyrg1314 {
				copy(yyv1314, yyv21314)
			}
		} else if yyl1314 != len(yyv1314) {
			yyv1314 = yyv1314[:yyl1314]
			yyc1314 = true
		}
		yyj1314 := 0
		for ; yyj1314 < yyrr1314; yyj1314++ {
			yyh1314.ElemContainerState(yyj1314)
			if r.TryDecodeAsNil() {
				yyv1314[yyj1314] = NodeUtilization{}
			} else {
				yyv1315 := &yyv1314[yyj1314]
				yyv1315.CodecDecodeSelf(d)
			}

		}
		if yyrt1314 {
			for ; yyj1314 < yyl1314; yyj1314++ {
				yyv1314 = append(yyv1314, NodeUtilization{})
				yyh1314.ElemContainerState(yyj1314)
				if r.TryDecodeAsNil() {
					yyv1314[yyj1314] = NodeUtilization{}
				} else {
					yyv1316 := &yyv1314[yyj1314]
					yyv1316.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1314 := 0
		for ; !r.CheckBreak(); yyj1314++ {

			if yyj1314 >= len(yyv1314) {
				yyv1314 = append(yyv1314, NodeUtilization{}) // var yyz1314 NodeUtilization
				yyc1314 = true
			}
			yyh1314.ElemContainerState(yyj1314)
			if yyj1314 < len(yyv1314) {
				if r.TryDecodeAsNil() {
					yyv1314[yyj1314] = NodeUtilization{}
				} else {
					yyv1317 := &yyv1314[yyj1314]
					yyv1317.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1314 < len(yyv1314) {
			yyv1314 = yyv1314[:yyj1314]
			yyc1314 = true
		} else if yyj1314 == 0 && yyv1314 == nil {
			yyv1314 = []NodeUtilization{}
			yyc1314 = true
		}
	}
	yyh1314.End()
	if yyc1314 {
		*v = yyv1314
	}
}

func (x codecSelfer1234) encSliceClusterAutoscaler(v []ClusterAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1318 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1319 := &yyv1318
		yy1319.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceClusterAutoscaler(v *[]ClusterAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1320 := *v
	yyh1320, yyl1320 := z.DecSliceHelperStart()
	var yyc1320 bool
	if yyl1320 == 0 {
		if yyv1320 == nil {
			yyv1320 = []ClusterAutoscaler{}
			yyc1320 = true
		} else if len(yyv1320) != 0 {
			yyv1320 = yyv1320[:0]
			yyc1320 = true
		}
	} else if yyl1320 > 0 {
		var yyrr1320, yyrl1320 int
		var yyrt1320 bool
		if yyl1320 > cap(yyv1320) {

			yyrg1320 := len(yyv1320) > 0
			yyv21320 := yyv1320
			yyrl1320, yyrt1320 = z.DecInferLen(yyl1320, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1320 {
				if yyrl1320 <= cap(yyv1320) {
					yyv1320 = yyv1320[:yyrl1320]
				} else {
					yyv1320 = make([]ClusterAutoscaler, yyrl1320)
				}
			} else {
				yyv1320 = make([]ClusterAutoscaler, yyrl1320)
			}
			yyc1320 = true
			yyrr1320 = len(yyv1320)
			if yyrg1320 {
				copy(yyv1320, yyv21320)
			}
		} else if yyl1320 != len(yyv1320) {
			yyv1320 = yyv1320[:yyl1320]
			yyc1320 = true
		}
		yyj1320 := 0
		for ; yyj1320 < yyrr1320; yyj1320++ {
			yyh1320.ElemContainerState(yyj1320)
			if r.TryDecodeAsNil() {
				yyv1320[yyj1320] = ClusterAutoscaler{}
			} else {
				yyv1321 := &yyv1320[yyj1320]
				yyv1321.CodecDecodeSelf(d)
			}

		}
		if yyrt1320 {
			for ; yyj1320 < yyl1320; yyj1320++ {
				yyv1320 = append(yyv1320, ClusterAutoscaler{})
				yyh1320.ElemContainerState(yyj1320)
				if r.TryDecodeAsNil() {
					yyv1320[yyj1320] = ClusterAutoscaler{}
				} else {
					yyv1322 := &yyv1320[yyj1320]
					yyv1322.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1320 := 0
		for ; !r.CheckBreak(); yyj1320++ {

			if yyj1320 >= len(yyv1320) {
				yyv1320 = append(yyv1320, ClusterAutoscaler{}) // var yyz1320 ClusterAutoscaler
				yyc1320 = true
			}
			yyh1320.ElemContainerState(yyj1320)
			if yyj1320 < len(yyv1320) {
				if r.TryDecodeAsNil() {
					yyv1320[yyj1320] = ClusterAutoscaler{}
				} else {
					yyv1323 := &yyv1320[yyj1320]
					yyv1323.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1320 < len(yyv1320) {
			yyv1320 = yyv1320[:yyj1320]
			yyc1320 = true
		} else if yyj1320 == 0 && yyv1320 == nil {
			yyv1320 = []ClusterAutoscaler{}
			yyc1320 = true
		}
	}
	yyh1320.End()
	if yyc1320 {
		*v = yyv1320
	}
}

func (x codecSelfer1234) encSliceLabelSelectorRequirement(v []LabelSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1324 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1325 := &yyv1324
		yy1325.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLabelSelectorRequirement(v *[]LabelSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1326 := *v
	yyh1326, yyl1326 := z.DecSliceHelperStart()
	var yyc1326 bool
	if yyl1326 == 0 {
		if yyv1326 == nil {
			yyv1326 = []LabelSelectorRequirement{}
			yyc1326 = true
		} else if len(yyv1326) != 0 {
			yyv1326 = yyv1326[:0]
			yyc1326 = true
		}
	} else if yyl1326 > 0 {
		var yyrr1326, yyrl1326 int
		var yyrt1326 bool
		if yyl1326 > cap(yyv1326) {

			yyrg1326 := len(yyv1326) > 0
			yyv21326 := yyv1326
			yyrl1326, yyrt1326 = z.DecInferLen(yyl1326, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt1326 {
				if yyrl1326 <= cap(yyv1326) {
					yyv1326 = yyv1326[:yyrl1326]
				} else {
					yyv1326 = make([]LabelSelectorRequirement, yyrl1326)
				}
			} else {
				yyv1326 = make([]LabelSelectorRequirement, yyrl1326)
			}
			yyc1326 = true
			yyrr1326 = len(yyv1326)
			if yyrg1326 {
				copy(yyv1326, yyv21326)
			}
		} else if yyl1326 != len(yyv1326) {
			yyv1326 = yyv1326[:yyl1326]
			yyc1326 = true
		}
		yyj1326 := 0
		for ; yyj1326 < yyrr1326; yyj1326++ {
			yyh1326.ElemContainerState(yyj1326)
			if r.TryDecodeAsNil() {
				yyv1326[yyj1326] = LabelSelectorRequirement{}
			} else {
				yyv1327 := &yyv1326[yyj1326]
				yyv1327.CodecDecodeSelf(d)
			}

		}
		if yyrt1326 {
			for ; yyj1326 < yyl1326; yyj1326++ {
				yyv1326 = append(yyv1326, LabelSelectorRequirement{})
				yyh1326.ElemContainerState(yyj1326)
				if r.TryDecodeAsNil() {
					yyv1326[yyj1326] = LabelSelectorRequirement{}
				} else {
					yyv1328 := &yyv1326[yyj1326]
					yyv1328.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1326 := 0
		for ; !r.CheckBreak(); yyj1326++ {

			if yyj1326 >= len(yyv1326) {
				yyv1326 = append(yyv1326, LabelSelectorRequirement{}) // var yyz1326 LabelSelectorRequirement
				yyc1326 = true
			}
			yyh1326.ElemContainerState(yyj1326)
			if yyj1326 < len(yyv1326) {
				if r.TryDecodeAsNil() {
					yyv1326[yyj1326] = LabelSelectorRequirement{}
				} else {
					yyv1329 := &yyv1326[yyj1326]
					yyv1329.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1326 < len(yyv1326) {
			yyv1326 = yyv1326[:yyj1326]
			yyc1326 = true
		} else if yyj1326 == 0 && yyv1326 == nil {
			yyv1326 = []LabelSelectorRequirement{}
			yyc1326 = true
		}
	}
	yyh1326.End()
	if yyc1326 {
		*v = yyv1326
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1330 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1331 := &yyv1330
		yy1331.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1332 := *v
	yyh1332, yyl1332 := z.DecSliceHelperStart()
	var yyc1332 bool
	if yyl1332 == 0 {
		if yyv1332 == nil {
			yyv1332 = []ConfigMap{}
			yyc1332 = true
		} else if len(yyv1332) != 0 {
			yyv1332 = yyv1332[:0]
			yyc1332 = true
		}
	} else if yyl1332 > 0 {
		var yyrr1332, yyrl1332 int
		var yyrt1332 bool
		if yyl1332 > cap(yyv1332) {

			yyrg1332 := len(yyv1332) > 0
			yyv21332 := yyv1332
			yyrl1332, yyrt1332 = z.DecInferLen(yyl1332, z.DecBasicHandle().MaxInitLen, 200)
			if yyrt1332 {
				if yyrl1332 <= cap(yyv1332) {
					yyv1332 = yyv1332[:yyrl1332]
				} else {
					yyv1332 = make([]ConfigMap, yyrl1332)
				}
			} else {
				yyv1332 = make([]ConfigMap, yyrl1332)
			}
			yyc1332 = true
			yyrr1332 = len(yyv1332)
			if yyrg1332 {
				copy(yyv1332, yyv21332)
			}
		} else if yyl1332 != len(yyv1332) {
			yyv1332 = yyv1332[:yyl1332]
			yyc1332 = true
		}
		yyj1332 := 0
		for ; yyj1332 < yyrr1332; yyj1332++ {
			yyh1332.ElemContainerState(yyj1332)
			if r.TryDecodeAsNil() {
				yyv1332[yyj1332] = ConfigMap{}
			} else {
				yyv1333 := &yyv1332[yyj1332]
				yyv1333.CodecDecodeSelf(d)
			}

		}
		if yyrt1332 {
			for ; yyj1332 < yyl1332; yyj1332++ {
				yyv1332 = append(yyv1332, ConfigMap{})
				yyh1332.ElemContainerState(yyj1332)
				if r.TryDecodeAsNil() {
					yyv1332[yyj1332] = ConfigMap{}
				} else {
					yyv1334 := &yyv1332[yyj1332]
					yyv1334.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1332 := 0
		for ; !r.CheckBreak(); yyj1332++ {

			if yyj1332 >= len(yyv1332) {
				yyv1332 = append(yyv1332, ConfigMap{}) // var yyz1332 ConfigMap
				yyc1332 = true
			}
			yyh1332.ElemContainerState(yyj1332)
			if yyj1332 < len(yyv1332) {
				if r.TryDecodeAsNil() {
					yyv1332[yyj1332] = ConfigMap{}
				} else {
					yyv1335 := &yyv1332[yyj1332]
					yyv1335.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1332 < len(yyv1332) {
			yyv1332 = yyv1332[:yyj1332]
			yyc1332 = true
		} else if yyj1332 == 0 && yyv1332 == nil {
			yyv1332 = []ConfigMap{}
			yyc1332 = true
		}
	}
	yyh1332.End()
	if yyc1332 {
		*v = yyv1332
	}
}
